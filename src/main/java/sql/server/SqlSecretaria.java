package sql.server;

import medi.flow.*;

import java.sql.*;
import java.text.*;
import java.util.*;

import static medi.flow.Main.getClinica;

public class SqlSecretaria {
    // Metodo para carregar os medicos
    public static List<String[]> obterTodosMedicos() {
        Connection conexao = SqlGeral.DatabaseConnection.getInstance(); // Obtém a conexão com a base de dados
        List<String[]> medicos = new ArrayList<>(); // Lista para armazenar os IDs e Especialidades dos médicos

        if (conexao != null) { // Verifica se a conexão foi estabelecida com sucesso
            try {
                // Declara uma consulta SQL para obter todos os IDs dos médicos
                String sql = "{CALL ObterTodosMedicos()}";
                CallableStatement statement = conexao.prepareCall(sql);

                // Executa a consulta e armazena o resultado
                ResultSet resultado = statement.executeQuery();

                // Adiciona todos os médicos à lista
                while (resultado.next()) {
                    int idMedico = resultado.getInt("ID");
                    String especialidade = resultado.getString("Especialidade");

                    medicos.add(new String[]{String.valueOf(idMedico), especialidade});
                }
                return medicos; // Retorna a lista com os IDs dos médicos
            } catch (SQLException e) { // Trata erros relacionados ao SQL
                System.out.println("Erro ao obter os médicos: " + e.getMessage());
            }
        }
        return medicos;
    }

    public static List<Paciente> obterTodosPacientes() {
        Connection conexao = SqlGeral.DatabaseConnection.getInstance(); // Obtém a conexão com a base de dados
        List<Paciente> pacientes = new ArrayList<>(); // Lista para armazenar os pacientes

        if (conexao != null) { // Verifica se a conexão foi estabelecida com sucesso
            try {
                // Declara uma consulta SQL para obter todos os pacientes
                String sql = "{CALL ObterTodosPacientes()}";
                CallableStatement statement = conexao.prepareCall(sql);

                // Executa a consulta e armazena o resultado
                ResultSet resultado = statement.executeQuery();

                // Adiciona todos os pacientes à lista
                while (resultado.next()) {
                    int numeroSNS = resultado.getInt("Numero_SNS");
                    String nome = resultado.getString("Nome");
                    int contacto = resultado.getInt("Contacto");

                    pacientes.add(new Paciente(numeroSNS, nome, contacto)); // Adiciona o paciente à lista
                }
                return pacientes; // Retorna a lista com os pacientes
            } catch (SQLException e) { // Trata erros relacionados ao SQL
                System.out.println("Erro ao obter os pacientes: " + e.getMessage());
            }
        }
        return pacientes;
    }

    // Metodo para criar uma nova consulta medica
    public static int criarConsulta(String data, String hora, String motivo, String nomePaciente, int snsPaciente, int contacto, int numSala, int idMedico, String nomeMedico) {
        Connection conexao = SqlGeral.DatabaseConnection.getInstance();
        int idConsultaGerado = -1; // Variable to store the generated ID

        // Reformat the date to SQL format
        SimpleDateFormat inputDateFormat = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat sqlDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String dataSql = "";
        try {
            dataSql = sqlDateFormat.format(inputDateFormat.parse(data));
        } catch (ParseException e) {
            e.printStackTrace();
        }

        // Add :00 to the end of the time
        String horaSql = hora + ":00";

        // Call the stored procedure
        String sql = "{CALL MarcarConsulta(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}"; // Call the stored procedure MarcarConsulta

        try (CallableStatement callableStatement = conexao.prepareCall(sql)) {
            // Set input parameters
            callableStatement.setDate(1, java.sql.Date.valueOf(dataSql)); // Date
            callableStatement.setTime(2, java.sql.Time.valueOf(horaSql)); // Time
            callableStatement.setString(3, motivo); // Reason
            callableStatement.setString(4, nomePaciente); // Patient's name
            callableStatement.setInt(5, snsPaciente); // Patient's SNS
            callableStatement.setInt(6, contacto); // Patient's contact
            callableStatement.setInt(7, numSala); // Room number
            callableStatement.setInt(8, idMedico); // Doctor's ID
            callableStatement.setString(9, nomeMedico); // Doctor's name
            callableStatement.registerOutParameter(10, java.sql.Types.INTEGER); // Consultation ID (generated by the database)

            // Execute the stored procedure
            callableStatement.execute();

            // Retrieve the generated ID
            idConsultaGerado = callableStatement.getInt(10); // Get the generated primary key value

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return idConsultaGerado; // Return the generated ID to present to the user
    }

    // Metodo para desmarcar uma consulta existente
    public static void desmarcarConsulta(int IDConsulta) {
        Connection conexao = SqlGeral.DatabaseConnection.getInstance(); // Obtém a conexão com a base de dados
        if (conexao != null) { // Verifica se a conexão foi estabelecida com sucesso
            try {
                // Declara uma consulta SQL para obter os dados da consulta
                String sql = "{CALL DesmarcarConsulta(?)}";
                CallableStatement statement = conexao.prepareCall(sql);

                // Substitui o placeholder (?) pelo valor do ID da consulta
                statement.setInt(1, IDConsulta);

                // Executa a consulta e armazena o resultado
                statement.executeUpdate();
            } catch (SQLException e) { // Trata erros relacionados ao SQL
                System.out.println("Erro ao desmarcar a consulta: " + e.getMessage());
            }
        }
    }

    // Metodo para criar um novo paciente caso eel nao exista
    public static void criarPaciente(int numero, String nome, int contacto) {
        Connection conexao = SqlGeral.DatabaseConnection.getInstance();

        if (getClinica().obterPacientePorSns(numero) == null) {
            String sql = "{CALL CriarPaciente(?, ?, ?)}";
            try (CallableStatement callableStatement = conexao.prepareCall(sql)) {
                callableStatement.setInt(1, numero);
                callableStatement.setString(2, nome);
                callableStatement.setInt(3, contacto);
                callableStatement.executeUpdate();
                System.out.println("Paciente criado com sucesso!");
            } catch (SQLException e) {
                e.printStackTrace();
                throw new RuntimeException("Erro ao criar paciente: " + e.getMessage());
            }
        }
    }

    //Metodo para armazenar todos os horarios de todos os medicos
    public static List<Medico.HorarioMedico> todosHorariosMedicos() {
        Connection conexao = SqlGeral.DatabaseConnection.getInstance();
        List<Medico.HorarioMedico> todosHorarios = new ArrayList<>();

        if (conexao != null) {
            try {
                // Retrieve all doctor IDs
                String sql = "{CALL ObterTodosMedicos()}";
                CallableStatement statement = conexao.prepareCall(sql);
                ResultSet resultado = statement.executeQuery();

                // For each doctor ID, get their schedules
                while (resultado.next()) {
                    int idMedico = resultado.getInt("ID");
                    Medico.HorarioMedico horarioMedico = new Medico.HorarioMedico(idMedico, horariosOcupadosMedico(idMedico));
                    todosHorarios.add(horarioMedico);
                }
            } catch (SQLException e) {
                System.out.println("Erro ao obter os horários de todos os médicos: " + e.getMessage());
            }
        }
        return todosHorarios;
    }

    //metodo para obter os horarios de um médico especifico
    public static List<String[]> horariosOcupadosMedico(int id) {
        Connection conexao = SqlGeral.DatabaseConnection.getInstance(); // Obtém a conexão com a base de dados
        List<String[]> horarios = new ArrayList<>(); // Lista para armazenar os horários ocupados dos médicos

        if (conexao != null) { // Verifica se a conexão foi estabelecida com sucesso
            try {
                // Declara uma consulta SQL para obter os horários ocupados do médico
                String sql = "{CALL ObterHorariosMedico(?)}";
                CallableStatement statement = conexao.prepareCall(sql);

                // Substitui o placeholder (?) pelo valor do ID do médico
                statement.setInt(1, id);

                // Executa a consulta e armazena o resultado
                ResultSet resultado = statement.executeQuery();

                // Adiciona todos os horários à lista
                while (resultado.next()) {
                    String data = resultado.getString("Data");
                    String hora = resultado.getString("Hora");

                    horarios.add(new String[]{data, hora});
                }
            } catch (SQLException e) { // Trata erros relacionados ao SQL
                System.out.println("Erro ao obter os horários ocupados do médico: " + e.getMessage());
            }
        }
        return horarios; // Retorna a lista com os horários ocupados
    }
}