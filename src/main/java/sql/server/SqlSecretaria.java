package sql.server;

import medi.flow.Clinica;

import java.sql.*;
import java.text.*;
import java.util.*;

public class SqlSecretaria {
    // Metodo para buscar uma consulta pelo numero SNS do paceinte
    public static HashMap<String, String> procurarConsultaPorSNS(int snsPaciente) {
        Connection conexao = SqlGeral.DatabaseConnection.getInstance(); // Obtém a conexão com o banco de dados
        HashMap<String, String> resultadoConsulta = new HashMap<>(); // Mapa para armazenar os resultados

        if (conexao != null) { // Verifica se a conexão foi estabelecida
            /*try {

            } catch (SQLException e) { // Trata erros relacionados ao SQL
                System.out.println("Erro ao executar a *stored procedure* VerConsultaPorSNS: " + e.getMessage());
            }*/
        }

        return resultadoConsulta; // Retorna os dados da consulta
    }

    // Metodo para carregar os medicos
    public static List<String[]> obterTodosMedicos() {
        Connection conexao = SqlGeral.DatabaseConnection.getInstance(); // Obtém a conexão com a base de dados
        List<String[]> medicos = new ArrayList<>(); // Lista para armazenar os IDs e Especialidades dos médicos

        if (conexao != null) { // Verifica se a conexão foi estabelecida com sucesso
            try {
                // Declara uma consulta SQL para obter todos os IDs dos médicos
                String sql = "{CALL ObterTodosMedicos()}";
                CallableStatement statement = conexao.prepareCall(sql);

                // Executa a consulta e armazena o resultado
                ResultSet resultado = statement.executeQuery();

                // Adiciona todos os médicos à lista
                while (resultado.next()) {
                    int idMedico = resultado.getInt("ID");
                    String especialidade = resultado.getString("Especialidade");

                    medicos.add(new String[]{String.valueOf(idMedico), especialidade});
                }
                return medicos; // Retorna a lista com os IDs dos médicos
            } catch (SQLException e) { // Trata erros relacionados ao SQL
                System.out.println("Erro ao obter os médicos: " + e.getMessage());
            }
        }
        return medicos;
    }

    // Metodo para criar uma nova consulta medica
    public static int criarConsulta(String data, String hora, String motivo, String nomePaciente, int snsPaciente, int contacto, int numSala, int idMedico, String nomeMedico) {
        Connection conexao = SqlGeral.DatabaseConnection.getInstance();
        int idConsultaGerado = -1; // Variable to store the generated ID

        // Reformat the date to SQL format
        SimpleDateFormat inputDateFormat = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat sqlDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String dataSql = "";
        try {
            dataSql = sqlDateFormat.format(inputDateFormat.parse(data));
        } catch (ParseException e) {
            e.printStackTrace();
        }

        // Add :00 to the end of the time
        String horaSql = hora + ":00";

        // Call the stored procedure
        String sql = "{CALL MarcarConsulta(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}"; // Call the stored procedure MarcarConsulta

        try (CallableStatement callableStatement = conexao.prepareCall(sql)) {
            // Set input parameters
            callableStatement.setDate(1, java.sql.Date.valueOf(dataSql)); // Date
            callableStatement.setTime(2, java.sql.Time.valueOf(horaSql)); // Time
            callableStatement.setString(3, motivo); // Reason
            callableStatement.setString(4, nomePaciente); // Patient's name
            callableStatement.setInt(5, snsPaciente); // Patient's SNS
            callableStatement.setInt(6, contacto); // Patient's contact
            callableStatement.setInt(7, numSala); // Room number
            callableStatement.setInt(8, idMedico); // Doctor's ID
            callableStatement.setString(9, nomeMedico); // Doctor's name
            callableStatement.registerOutParameter(10, java.sql.Types.INTEGER); // Consultation ID (generated by the database)

            // Execute the stored procedure
            callableStatement.execute();

            // Retrieve the generated ID
            idConsultaGerado = callableStatement.getInt(10); // Get the generated primary key value

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return idConsultaGerado; // Return the generated ID to present to the user
    }

    // Metodo para desmarcar uma consulta existente
    public static void desmarcarConsulta(int IDConsulta){
        Connection conexao = SqlGeral.DatabaseConnection.getInstance(); // Obtém a conexão com a base de dados
        if (conexao != null) { // Verifica se a conexão foi estabelecida com sucesso
            try {
                // Declara uma consulta SQL para obter os dados da consulta
                String sql = "{CALL DesmarcarConsulta(?)}";
                CallableStatement statement = conexao.prepareCall(sql);

                // Substitui o placeholder (?) pelo valor do ID da consulta
                statement.setInt(1, IDConsulta);

                // Executa a consulta e armazena o resultado
                statement.executeUpdate();
            } catch (SQLException e) { // Trata erros relacionados ao SQL
                System.out.println("Erro ao desmarcar a consulta: " + e.getMessage());
            }
        }
    }

    // Metodo para verificar se um paciente já existe no banco de dados
    public static Clinica.Paciente verificarPacienteExiste(int numero) {
    Connection conexao = SqlGeral.DatabaseConnection.getInstance();
    String sqlVerificar = "{CALL ObterPacientePorSNS(?)}";

    try (CallableStatement callableStatement = conexao.prepareCall(sqlVerificar)) {
        callableStatement.setInt(1, numero);
        try (ResultSet rs = callableStatement.executeQuery()) {
            if (rs.next()) {
                int numeroSNS = rs.getInt("Numero_SNS");
                String nome = rs.getString("Nome");
                int contacto = rs.getInt("Contacto");
                return new Clinica.Paciente(numeroSNS, nome, contacto);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    } catch (SQLException e) {
        e.printStackTrace();
        throw new RuntimeException("Erro ao verificar paciente: " + e.getMessage());
    }
    return null;
}

    // Metodo para criar um novo paciente caso eel nao exista
    public static void criarPaciente(int numero, String nome, int contacto) {
        Connection conexao = SqlGeral.DatabaseConnection.getInstance();
        if (verificarPacienteExiste(numero) == null) {
            String sql = "CALL CriarPaciente(?, ?, ?)";
            try (PreparedStatement preparedStatement = conexao.prepareStatement(sql)) {
                preparedStatement.setInt(1, numero);
                preparedStatement.setString(2, nome);
                preparedStatement.setInt(3, contacto);
                preparedStatement.executeUpdate();
            } catch (SQLException e) {
                e.printStackTrace();
                throw new RuntimeException("Erro ao criar paciente: " + e.getMessage());
            }
        }
    }
}
