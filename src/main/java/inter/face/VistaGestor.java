/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inter.face;

import java.awt.HeadlessException;
import javax.swing.*;
import sql.server.*;
import java.sql.*;
import java.util.*;
import static sql.server.SqlGestor.*;


/**
 *
 * @author Luis
 */
public final class VistaGestor extends javax.swing.JFrame {
    HashMap<String, String> dados = new HashMap<>();
    /**
     * Creates new form VistaBase
     */
    public VistaGestor() {
        initComponents();
        carregarCredenciaisBaseDeDados(); // Carrega as credenciais existentes
    }

    void carregarCredenciaisBaseDeDados(){ //Carrega as credenciais existentes de acordo com os dados fornecidos pelo SBGD
        credenciaisPanel.removeAll(); // Limpa o painel de credenciais

        List<String> utilizadores = SqlGestor.obterTodosUtilizadores(); // Obtem os IDs de todos os utilizadores

        // Ordena os utilizadores pelo tipo (secretaria, medico, gestor) e, depois, pelo ID
        utilizadores.sort((id1, id2) -> {
            String tipo1 = SqlGestor.dadosUtilizador(id1).get("TipoUtilizador"); // Tipo de utilizador 1
            String tipo2 = SqlGestor.dadosUtilizador(id2).get("TipoUtilizador"); // Tipo de utilizador 2
            int tipoComparison = tipo1.compareToIgnoreCase(tipo2); // compara os tipos 
            if (tipoComparison != 0) {
                return tipoComparison; // Ordena por tipo, se forem diferentes
            }
            return id1.compareTo(id2); // Ordena por Id se o tipo for igual
        });

        int tamanhoPainelCredenciais = 0; // tamanho do painel inicial

        // Itera pelos IDs dos utilizadores
        for (String id : utilizadores) {
            dados = SqlGestor.dadosUtilizador(id); // Obtem os dados do utilizador com base no ID
            String pass_word = dados.get("Password");
            dados.put("Password", "*".repeat(pass_word.length())); // Esconde a senha com a quantidade correspondente de asteriscos
            criarPainelCredencial(); // Cria e adiciona o painel individual do utilizador
            tamanhoPainelCredenciais += 100;
            credenciaisPanel.setPreferredSize(new java.awt.Dimension(900, tamanhoPainelCredenciais));
            
        }

        // Faz o scroll começar em cima
        SwingUtilities.invokeLater(() -> {
            JScrollBar verticalScrollBar = jScrollPane1.getVerticalScrollBar();
            verticalScrollBar.setValue(verticalScrollBar.getMinimum());
        });

        // Atualiza o painel para refletir as mudanças na interface grafica
        credenciaisPanel.revalidate();
        credenciaisPanel.repaint();
        credenciaisPanel.setVisible(true);
    }
    
    void criarPainelCredencial(){ //Adiciona uma credencial ao painel
        Credencial credencial = new Credencial(dados, this); // Cria uma instancia da classe credencial
        credenciaisPanel.add(credencial); // Adiciona o painel de credencial ao painel principal
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    void mostrarPainelSenha(String id) {
        JPasswordField passwordField = new JPasswordField(); // Campo para entrada da senha
        int option = JOptionPane.showConfirmDialog(this, passwordField, "Digite a senha do gestor", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (option == JOptionPane.OK_OPTION) { // Se o utilziador confirmar a operação:
            String senha = new String(passwordField.getPassword()); // Obtem a senha inserida
            if (verificarSenhaGestor(senha)) { // Verifica se a sneha está correta
                eliminarUtilizador(id); // Elimina o utilizador com o ID fornecido
            } else {
                JOptionPane.showMessageDialog(this, "Senha incorreta!", "Erro", JOptionPane.ERROR_MESSAGE); // Exibe o erro
            }
        }
    }

    private boolean verificarSenhaGestor(String senha) {
        // Obtenha a lista de gestores do banco de dados
        List<HashMap<String, String>> gestores = SqlGestor.obterTodosGestores();

        // Verifique se a senha fornecida corresponde a alguma senha de gestor
        for (HashMap<String, String> gestor : gestores) {
            try {
                // Descriptografa a senha armazenada do gestor
                String senhaDescriptografada = CifrarPasswords.decifrar(gestor.get("Password"));

                // Compara a senha fornecida com a senha descriptografada
                if (senhaDescriptografada.equals(senha)) {
                    return true; // A senha fornecida é válida
                }
            } catch (Exception e) {
                // Se ocorrer algum erro na descriptografia, ignore esse gestor
                System.out.println("Erro ao descriptografar a senha do gestor: " + e.getMessage());
            }
        }
        return false; // Nenhuma senha correspondente foi encontrada
    }

    private void eliminarUtilizador(String id) {
        try {
            int idInt = Integer.parseInt(id); // Converte o ID de String para inteiro
            boolean eliminado = SqlGestor.eliminarUtilizador(idInt); // Chama o método para eliminar o utilizador

            if (eliminado) {
                JOptionPane.showMessageDialog(this, "Utilizador eliminado com sucesso!");
                System.out.println("Utilizador eliminado, recarregando credenciais...");
                carregarCredenciaisBaseDeDados(); // Recarrega a lista de utilizadores
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao eliminar utilizador!");
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(
                    this,
                    "Erro: O ID fornecido é inválido. Por favor, insira um número válido.",
                    "Erro ao eliminar utilizador",
                    JOptionPane.ERROR_MESSAGE
            );
        } catch (SQLException e) {
            // Captura o erro específico de chave estrangeira
            if (e.getMessage().contains("foreign key") || e.getMessage().contains("constraint fails")) {
                JOptionPane.showMessageDialog(
                        this,
                        "Erro: Não é possível eliminar o utilizador porque ele está associado a outros registros no sistema.",
                        "Erro ao eliminar utilizador",
                        JOptionPane.ERROR_MESSAGE
                );
            } else {
                JOptionPane.showMessageDialog(
                        this,
                        "Erro no banco de dados: " + e.getMessage(),
                        "Erro ao eliminar utilizador",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(
                    this,
                    "Erro inesperado ao eliminar utilizador: " + e.getMessage(),
                    "Erro ao eliminar utilizador",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        botaoPesquisa = new javax.swing.JButton();
        barraPesquisa = new javax.swing.JTextField();
        botaoCriarCredencial = new javax.swing.JButton();
        botaoEliminarCredencial = new javax.swing.JButton();
        criarCredencial = new javax.swing.JLayeredPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        password = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        nomeCompleto = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        especialidade = new javax.swing.JTextField();
        especLabel = new javax.swing.JLabel();
        nMedicoLabel = new javax.swing.JLabel();
        numeroDeMedico = new javax.swing.JTextField();
        concluirButton = new javax.swing.JButton();
        tipoFuncionario = new javax.swing.JComboBox<>();
        numeroCC = new javax.swing.JTextField();
        eliminarCredencial = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        credenciaisPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        exitButton = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel3.setMinimumSize(new java.awt.Dimension(1080, 660));
        jPanel3.setPreferredSize(new java.awt.Dimension(1080, 660));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel7.setBackground(new java.awt.Color(0, 149, 218));
        jPanel7.setPreferredSize(new java.awt.Dimension(960, 50));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        botaoPesquisa.setVisible(false);
        botaoPesquisa.setBackground(new java.awt.Color(0, 132, 193));
        botaoPesquisa.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        botaoPesquisa.setForeground(new java.awt.Color(245, 245, 245));
        botaoPesquisa.setText("PESQUISAR");
        botaoPesquisa.setMaximumSize(new java.awt.Dimension(120, 35));
        botaoPesquisa.setMinimumSize(new java.awt.Dimension(120, 35));
        botaoPesquisa.setPreferredSize(new java.awt.Dimension(140, 35));
        botaoPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPesquisaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 80);
        jPanel7.add(botaoPesquisa, gridBagConstraints);

        barraPesquisa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        barraPesquisa.setText("Pesquisar...");
        barraPesquisa.setMinimumSize(new java.awt.Dimension(350, 35));
        barraPesquisa.setPreferredSize(new java.awt.Dimension(350, 35));
        barraPesquisa.setVisible(false);
        barraPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barraPesquisaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel7.add(barraPesquisa, gridBagConstraints);

        botaoCriarCredencial.setBackground(new java.awt.Color(0, 132, 193));
        botaoCriarCredencial.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        botaoCriarCredencial.setForeground(new java.awt.Color(245, 245, 245));
        botaoCriarCredencial.setLabel("Criar");
        botaoCriarCredencial.setMaximumSize(new java.awt.Dimension(140, 35));
        botaoCriarCredencial.setMinimumSize(new java.awt.Dimension(140, 35));
        botaoCriarCredencial.setPreferredSize(new java.awt.Dimension(140, 35));
        botaoCriarCredencial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCriarCredencialActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(botaoCriarCredencial, gridBagConstraints);

        botaoEliminarCredencial.setBackground(new java.awt.Color(0, 132, 193));
        botaoEliminarCredencial.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        botaoEliminarCredencial.setForeground(new java.awt.Color(245, 245, 245));
        botaoEliminarCredencial.setLabel("Eliminar");
        botaoEliminarCredencial.setMaximumSize(new java.awt.Dimension(140, 35));
        botaoEliminarCredencial.setMinimumSize(new java.awt.Dimension(140, 35));
        botaoEliminarCredencial.setPreferredSize(new java.awt.Dimension(150, 35));
        botaoEliminarCredencial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEliminarCredencialActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel7.add(botaoEliminarCredencial, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(jPanel7, gridBagConstraints);

        criarCredencial.setBackground(new java.awt.Color(0, 149, 218));
        criarCredencial.setMinimumSize(new java.awt.Dimension(960, 550));
        criarCredencial.setOpaque(true);
        criarCredencial.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(0, 149, 218));
        jPanel2.setMinimumSize(new java.awt.Dimension(960, 550));
        jPanel2.setPreferredSize(new java.awt.Dimension(960, 550));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(242, 242, 242));
        jLabel4.setText("Password:");
        jLabel4.setMaximumSize(new java.awt.Dimension(200, 30));
        jLabel4.setMinimumSize(new java.awt.Dimension(200, 30));
        jLabel4.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 250);
        jPanel2.add(jLabel4, gridBagConstraints);

        password.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        password.setMaximumSize(new java.awt.Dimension(200, 30));
        password.setMinimumSize(new java.awt.Dimension(200, 30));
        password.setPreferredSize(new java.awt.Dimension(290, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 160);
        jPanel2.add(password, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(242, 242, 242));
        jLabel5.setText("DADOS DO UTILIZADOR");
        jLabel5.setMaximumSize(new java.awt.Dimension(450, 30));
        jLabel5.setMinimumSize(new java.awt.Dimension(450, 30));
        jLabel5.setPreferredSize(new java.awt.Dimension(450, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 0, 15);
        jPanel2.add(jLabel5, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(242, 242, 242));
        jLabel6.setText("Nome Completo:");
        jLabel6.setMaximumSize(new java.awt.Dimension(450, 30));
        jLabel6.setMinimumSize(new java.awt.Dimension(450, 30));
        jLabel6.setName(""); // NOI18N
        jLabel6.setPreferredSize(new java.awt.Dimension(450, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(jLabel6, gridBagConstraints);

        nomeCompleto.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        nomeCompleto.setMaximumSize(new java.awt.Dimension(450, 30));
        nomeCompleto.setMinimumSize(new java.awt.Dimension(450, 30));
        nomeCompleto.setPreferredSize(new java.awt.Dimension(450, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel2.add(nomeCompleto, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(242, 242, 242));
        jLabel7.setText("Numero CC:");
        jLabel7.setMaximumSize(new java.awt.Dimension(90, 30));
        jLabel7.setMinimumSize(new java.awt.Dimension(90, 30));
        jLabel7.setPreferredSize(new java.awt.Dimension(90, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 360);
        jPanel2.add(jLabel7, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(242, 242, 242));
        jLabel8.setText("Tipo de Funcionario:");
        jLabel8.setMaximumSize(new java.awt.Dimension(140, 30));
        jLabel8.setMinimumSize(new java.awt.Dimension(140, 30));
        jLabel8.setPreferredSize(new java.awt.Dimension(140, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 310);
        jPanel2.add(jLabel8, gridBagConstraints);

        especialidade.setVisible(false);
        especialidade.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        especialidade.setMaximumSize(new java.awt.Dimension(200, 30));
        especialidade.setMinimumSize(new java.awt.Dimension(200, 30));
        especialidade.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 250);
        jPanel2.add(especialidade, gridBagConstraints);

        especLabel.setVisible(false);
        especLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        especLabel.setForeground(new java.awt.Color(242, 242, 242));
        especLabel.setText("Especialidade:");
        especLabel.setMaximumSize(new java.awt.Dimension(200, 30));
        especLabel.setMinimumSize(new java.awt.Dimension(200, 30));
        especLabel.setPreferredSize(new java.awt.Dimension(200, 30));
        especLabel.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 250);
        jPanel2.add(especLabel, gridBagConstraints);

        nMedicoLabel.setVisible(false);
        nMedicoLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        nMedicoLabel.setForeground(new java.awt.Color(242, 242, 242));
        nMedicoLabel.setText("Número da Ordem:");
        nMedicoLabel.setMaximumSize(new java.awt.Dimension(200, 30));
        nMedicoLabel.setMinimumSize(new java.awt.Dimension(200, 30));
        nMedicoLabel.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 250, 0, 0);
        jPanel2.add(nMedicoLabel, gridBagConstraints);

        numeroDeMedico.setVisible(false);
        numeroDeMedico.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        numeroDeMedico.setMaximumSize(new java.awt.Dimension(200, 30));
        numeroDeMedico.setMinimumSize(new java.awt.Dimension(200, 30));
        numeroDeMedico.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 250, 0, 0);
        jPanel2.add(numeroDeMedico, gridBagConstraints);

        concluirButton.setBackground(new java.awt.Color(0, 132, 193));
        concluirButton.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        concluirButton.setForeground(new java.awt.Color(242, 242, 242));
        concluirButton.setText("Concluir");
        concluirButton.setMaximumSize(new java.awt.Dimension(150, 35));
        concluirButton.setMinimumSize(new java.awt.Dimension(150, 35));
        concluirButton.setPreferredSize(new java.awt.Dimension(150, 35));
        concluirButton.setSelected(true);
        concluirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                concluirButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 0, 0);
        jPanel2.add(concluirButton, gridBagConstraints);

        tipoFuncionario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Secretaria", "Médico", "Gestor" }));
        tipoFuncionario.setMaximumSize(new java.awt.Dimension(80, 30));
        tipoFuncionario.setMinimumSize(new java.awt.Dimension(80, 30));
        tipoFuncionario.setPreferredSize(new java.awt.Dimension(100, 30));
        tipoFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoFuncionarioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 70);
        jPanel2.add(tipoFuncionario, gridBagConstraints);

        numeroCC.setMaximumSize(new java.awt.Dimension(200, 30));
        numeroCC.setMinimumSize(new java.awt.Dimension(200, 30));
        numeroCC.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 70);
        jPanel2.add(numeroCC, gridBagConstraints);

        criarCredencial.add(jPanel2, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel3.add(criarCredencial, gridBagConstraints);

        eliminarCredencial.setBackground(new java.awt.Color(0, 149, 218));
        eliminarCredencial.setMinimumSize(new java.awt.Dimension(960, 35));
        eliminarCredencial.setOpaque(true);
        eliminarCredencial.setVisible(false);
        eliminarCredencial.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setHorizontalScrollBar(null);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(960, 550));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(960, 550));

        credenciaisPanel.setMinimumSize(new java.awt.Dimension(900, 0));
        credenciaisPanel.setPreferredSize(new java.awt.Dimension(900, 0));
        credenciaisPanel.setLayout(new java.awt.GridLayout(0, 1, 10, 10));
        jScrollPane1.setViewportView(credenciaisPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        eliminarCredencial.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel3.add(eliminarCredencial, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel3, gridBagConstraints);

        jPanel1.setBackground(new java.awt.Color(0, 149, 218));
        jPanel1.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        jPanel1.setMinimumSize(new java.awt.Dimension(1080, 60));
        jPanel1.setPreferredSize(new java.awt.Dimension(1080, 60));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("MediFlow");
        jLabel1.setMaximumSize(new java.awt.Dimension(250, 25));
        jLabel1.setPreferredSize(new java.awt.Dimension(140, 60));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 825);
        jPanel1.add(jLabel1, gridBagConstraints);

        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit.png"))); // NOI18N
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1015, 0, 0);
        jPanel1.add(exitButton, gridBagConstraints);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.png"))); // NOI18N
        jLabel12.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1000);
        jPanel1.add(jLabel12, gridBagConstraints);

        getContentPane().add(jPanel1, new java.awt.GridBagConstraints());

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void barraPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barraPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_barraPesquisaActionPerformed

    private void botaoCriarCredencialActionPerformed(java.awt.event.ActionEvent evt) {
        // Esconde a barra de pesquisa e o botao de pesquisa
        barraPesquisa.setVisible(false);
        botaoPesquisa.setVisible(false);
        // Exibe o painel de criação de credencial
        criarCredencial.setVisible(true);
        credenciaisPanel.setVisible(false); // Esconde o painel de credenciais
        eliminarCredencial.setVisible(false); // Esconde o painel de eliminação de credenciais
    }                                                    
    
    // Metodo adicionado quando o botao para eliminar credenciais é clicado
    private void botaoEliminarCredencialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEliminarCredencialActionPerformed
        eliminarCredencial.setVisible(true); // Exibe o painel para eliminar credenciais
        // Exibe a barra de pesquisa e o botão de pesquisa
        barraPesquisa.setVisible(true);
        botaoPesquisa.setVisible(true);
        credenciaisPanel.setVisible(true); // Exibe o painel de credenciais existentes
        criarCredencial.setVisible(false); // Esconde o painel de criação de credenciais
    }//GEN-LAST:event_botaoEliminarCredencialActionPerformed

    // Metodo adionado quando o botão de pesquisa é pressionado
    private void botaoPesquisaActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            int idUtilizador = Integer.parseInt(barraPesquisa.getText()); // Tenta converter o valor da barra de pesquisa para inteiro (ID do utilizador)
            HashMap<String, String> dadosUtilizador = SqlGestor.procurarUtilizadorPorID(idUtilizador); // Chama o metodo para procurar o utilizador pelo ID

            // Se o utilizador for encontrado, exibe os dados
            if (dadosUtilizador != null && !dadosUtilizador.isEmpty()) {
                System.out.println("Dados do Utilizador: " + dadosUtilizador);

                // Limpa o painel de credenciais
                credenciaisPanel.removeAll();

                // Adiciona o utilizador encontrado ao painel de credenciais
                dados = dadosUtilizador;

                // Verifica e exibe o tipo de utilizador
                String tipoUtilizador = dados.get("TipoUtilizador");
                if (tipoUtilizador == null || tipoUtilizador.isEmpty()) {
                    tipoUtilizador = "Função não disponível";
                }
                System.out.println("Tipo de Utilizador para exibição: " + tipoUtilizador);

                // Esconde a senha, se necessário
                if ("Gestor".equalsIgnoreCase(tipoUtilizador)) {
                    String senha = dados.get("Password");
                    if (senha != null) {
                        dados.put("Password", "*".repeat(senha.length())); // Esconde a senha
                    }
                }

                criarPainelCredencial();

                // Atualiza o painel de credenciais
                credenciaisPanel.revalidate();
                credenciaisPanel.repaint();
            } else {
                JOptionPane.showMessageDialog(this, "Nenhum utilizador encontrado com ID: " + idUtilizador);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, coloque um ID válido.", "Erro de Validação", JOptionPane.ERROR_MESSAGE);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Erro ao procurar utilizador: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }


    // Metodo acionado quando a sleção do tipo de funcionario é alterada
    private void tipoFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoFuncionarioActionPerformed
        String tipoSelecionado = tipoFuncionario.getSelectedItem().toString();

        // Se o tipo de funcionario selecionado no combo box for medico mostra masi campos
        if ("Medico".equalsIgnoreCase(tipoSelecionado)) {
            especialidade.setVisible(true);
            numeroDeMedico.setVisible(true);
            nMedicoLabel.setVisible(true);
            especLabel.setVisible(true);
        } else {
            // Caso contrario, esconde esses campos
            especialidade.setVisible(false);
            numeroDeMedico.setVisible(false);
            nMedicoLabel.setVisible(false);
            especLabel.setVisible(false);
        }

// Atualiza o painel para refletir as mudanças de visibilidade
        jPanel2.revalidate();
        jPanel2.repaint();
    }//GEN-LAST:event_tipoFuncionarioActionPerformed

    private void exitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseClicked
        dispose();
        // Abir VistaDeLogin 
        new VistaDeLogin().setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_exitButtonMouseClicked

    // metodo acionado quando o botao "Concluir" é pressionado para criar um novo utilizador
    private void concluirButtonActionPerformed(java.awt.event.ActionEvent evt) { //Cria um novo utilizador
        try {
            // Obter dados da interface gráfica
            String nome = nomeCompleto.getText();
            String pessword = password.getText();
            String tipoUtilizador = tipoFuncionario.getSelectedItem().toString();
            int cc = Integer.parseInt(numeroCC.getText());

            // Variáveis específicas para médicos
            String espcialidade = "";
            int numOrdem = 0;

            if ("Medico".equalsIgnoreCase(tipoUtilizador)) {
                // Obter os valores adicionais para médicos
                espcialidade = especialidade.getText();
                numOrdem = Integer.parseInt(numeroDeMedico.getText());
            }

            // Chamar o método para criar o utilizador e verificar se é médico
            int idUtilizador = criarUtilizadorEAdicionarMedico(nome, pessword, tipoUtilizador, cc, espcialidade, numOrdem);

            // Exibir mensagem de sucesso
            if (idUtilizador != -1) {
                JOptionPane.showMessageDialog(null,
                        "Utilizador criado com sucesso! ID: " + idUtilizador);
            } else {
                JOptionPane.showMessageDialog(null,
                        "Erro ao criar utilizador. Verifique os dados inseridos.");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null,
                    "Por favor, insira dados válidos para CC ou Número do Médico.",
                    "Erro de Validação",
                    JOptionPane.ERROR_MESSAGE);
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(null,
                    "Erro ao processar os dados: " + ex.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new VistaGestor().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField barraPesquisa;
    private javax.swing.JButton botaoCriarCredencial;
    private javax.swing.JButton botaoEliminarCredencial;
    private javax.swing.JButton botaoPesquisa;
    private javax.swing.JButton concluirButton;
    private javax.swing.JPanel credenciaisPanel;
    private javax.swing.JLayeredPane criarCredencial;
    private javax.swing.JLayeredPane eliminarCredencial;
    private javax.swing.JLabel especLabel;
    private javax.swing.JTextField especialidade;
    private javax.swing.JLabel exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nMedicoLabel;
    private javax.swing.JTextField nomeCompleto;
    private javax.swing.JTextField numeroCC;
    private javax.swing.JTextField numeroDeMedico;
    private javax.swing.JTextField password;
    private javax.swing.JComboBox<String> tipoFuncionario;
    // End of variables declaration//GEN-END:variables
}
