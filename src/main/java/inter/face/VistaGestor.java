/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inter.face;

import java.awt.HeadlessException;
import javax.swing.*;

import medi.flow.*;
import sql.server.*;
import java.util.*;

import static medi.flow.Main.getClinica;
import static sql.server.SqlGestor.*;


/**
 *
 * @author Luis
 */
// Classe que representa a interface gráfica do gestor
public final class VistaGestor extends javax.swing.JFrame {
    static String passwordGestor; // Password do gestor que está a usar o sistema
    /**
     * Creates new form VistaGestor
     */
    // Construtor da classe
    public VistaGestor(String passwordGestor) {
        initComponents();// Inicializa os componentes da interface
        carregarCredenciaisBaseDeDados(); // Carrega as credenciais existentes
        this.passwordGestor = passwordGestor; // Define a password do gestor que está a usar o sistema
    }

    // Metodo que é chamado quando o botão de concluir é pressionado
    void carregarCredenciaisBaseDeDados(){ //Carrega as credenciais existentes de acordo com os dados fornecidos pelo SBGD
        credenciaisPanel.removeAll(); // Limpa o painel de credenciais

        List<Utilizador> utilizadores = getClinica().getUtilizador(); // Obtem todos os utilizadores

        // Ordena os utilizadores pelo tipo (secretaria, medico, gestor) e, depois, pelo ID
        utilizadores.sort(Comparator.comparing(Utilizador::getTipoUtilizador).thenComparing(Utilizador::getId));

        int tamanhoPainelCredenciais = 0; // tamanho do painel inicial

        // Itera pelos utilizadores
        for (Utilizador utilizador : utilizadores) {
            tamanhoPainelCredenciais += 100; // Incrementa o tamanho do painel
            credenciaisPanel.setPreferredSize(new java.awt.Dimension(960, tamanhoPainelCredenciais));// Define o tamanho do painel de credenciais
            criarPainelCredencial(utilizador); // Adiciona uma credencial ao painel
        }

        // Faz o scroll começar em cima
        SwingUtilities.invokeLater(() -> {// Atualiza a interface grafica
            JScrollBar verticalScrollBar = jScrollPane1.getVerticalScrollBar();// Obtem a barra de scroll vertical
            verticalScrollBar.setValue(verticalScrollBar.getMinimum());// Define o valor da barra de scroll vertical para o minimo
        });

        // Atualiza o painel para refletir as mudanças na interface grafica
        credenciaisPanel.revalidate();
        credenciaisPanel.repaint();
    }

    // Metodo que é chamado quando o botão de concluir é pressionado
    void criarPainelCredencial(Utilizador utilizador){ //Adiciona uma credencial ao painel
        Credencial credencial = new Credencial(utilizador); // Cria uma instancia da classe credencial
        credenciaisPanel.add(credencial); // Adiciona o painel de credencial ao painel principal
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */


    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        barraPesquisa = new javax.swing.JTextField();
        botaoCriarCredencial = new javax.swing.JButton();
        botaoEliminarCredencial = new javax.swing.JButton();
        botaoPesquisa = new javax.swing.JLabel();
        criarCredencial = new javax.swing.JLayeredPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        password = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        nomeCompleto = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        especialidade = new javax.swing.JTextField();
        especLabel = new javax.swing.JLabel();
        nMedicoLabel = new javax.swing.JLabel();
        numeroDeMedico = new javax.swing.JTextField();
        concluirButton = new javax.swing.JButton();
        tipoFuncionario = new javax.swing.JComboBox<>();
        numeroCC = new javax.swing.JTextField();
        salaLabel = new javax.swing.JLabel();
        salaField = new javax.swing.JTextField();
        eliminarCredencial = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        credenciaisPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        exitButton = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel3.setMinimumSize(new java.awt.Dimension(1080, 660));
        jPanel3.setPreferredSize(new java.awt.Dimension(1080, 660));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel7.setBackground(new java.awt.Color(0, 149, 218));
        jPanel7.setPreferredSize(new java.awt.Dimension(960, 50));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        barraPesquisa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        barraPesquisa.setMinimumSize(new java.awt.Dimension(350, 35));
        barraPesquisa.setPreferredSize(new java.awt.Dimension(350, 35));
        barraPesquisa.setVisible(false);
        barraPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barraPesquisaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(barraPesquisa, gridBagConstraints);

        botaoCriarCredencial.setBackground(new java.awt.Color(0, 132, 193));
        botaoCriarCredencial.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        botaoCriarCredencial.setForeground(new java.awt.Color(242, 242, 242));
        botaoCriarCredencial.setLabel("Criar");
        botaoCriarCredencial.setMaximumSize(new java.awt.Dimension(140, 35));
        botaoCriarCredencial.setMinimumSize(new java.awt.Dimension(140, 35));
        botaoCriarCredencial.setPreferredSize(new java.awt.Dimension(140, 35));
        botaoCriarCredencial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCriarCredencialActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(botaoCriarCredencial, gridBagConstraints);

        botaoEliminarCredencial.setBackground(new java.awt.Color(0, 132, 193));
        botaoEliminarCredencial.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        botaoEliminarCredencial.setForeground(new java.awt.Color(242, 242, 242));
        botaoEliminarCredencial.setLabel("Eliminar");
        botaoEliminarCredencial.setMaximumSize(new java.awt.Dimension(140, 35));
        botaoEliminarCredencial.setMinimumSize(new java.awt.Dimension(140, 35));
        botaoEliminarCredencial.setPreferredSize(new java.awt.Dimension(140, 35));
        botaoEliminarCredencial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEliminarCredencialActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel7.add(botaoEliminarCredencial, gridBagConstraints);

        botaoPesquisa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        botaoPesquisa.setVisible(false);
        botaoPesquisa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoPesquisaMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 200);
        jPanel7.add(botaoPesquisa, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(jPanel7, gridBagConstraints);

        criarCredencial.setBackground(new java.awt.Color(0, 149, 218));
        criarCredencial.setMinimumSize(new java.awt.Dimension(960, 550));
        criarCredencial.setOpaque(true);
        criarCredencial.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(0, 149, 218));
        jPanel2.setMinimumSize(new java.awt.Dimension(960, 550));
        jPanel2.setPreferredSize(new java.awt.Dimension(960, 550));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(242, 242, 242));
        jLabel4.setText("Password:");
        jLabel4.setMaximumSize(new java.awt.Dimension(200, 30));
        jLabel4.setMinimumSize(new java.awt.Dimension(200, 30));
        jLabel4.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 250);
        jPanel2.add(jLabel4, gridBagConstraints);

        password.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        password.setMaximumSize(new java.awt.Dimension(200, 30));
        password.setMinimumSize(new java.awt.Dimension(200, 30));
        password.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 250);
        jPanel2.add(password, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(242, 242, 242));
        jLabel5.setText("DADOS DO UTILIZADOR");
        jLabel5.setMaximumSize(new java.awt.Dimension(450, 30));
        jLabel5.setMinimumSize(new java.awt.Dimension(450, 30));
        jLabel5.setPreferredSize(new java.awt.Dimension(450, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 0, 15);
        jPanel2.add(jLabel5, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(242, 242, 242));
        jLabel6.setText("Nome Completo:");
        jLabel6.setMaximumSize(new java.awt.Dimension(450, 30));
        jLabel6.setMinimumSize(new java.awt.Dimension(450, 30));
        jLabel6.setName(""); // NOI18N
        jLabel6.setPreferredSize(new java.awt.Dimension(450, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(jLabel6, gridBagConstraints);

        nomeCompleto.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        nomeCompleto.setMaximumSize(new java.awt.Dimension(450, 30));
        nomeCompleto.setMinimumSize(new java.awt.Dimension(450, 30));
        nomeCompleto.setPreferredSize(new java.awt.Dimension(450, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel2.add(nomeCompleto, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(242, 242, 242));
        jLabel7.setText("Numero CC:");
        jLabel7.setMaximumSize(new java.awt.Dimension(90, 30));
        jLabel7.setMinimumSize(new java.awt.Dimension(90, 30));
        jLabel7.setPreferredSize(new java.awt.Dimension(90, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 360);
        jPanel2.add(jLabel7, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(242, 242, 242));
        jLabel8.setText("Tipo de Funcionario:");
        jLabel8.setMaximumSize(new java.awt.Dimension(140, 30));
        jLabel8.setMinimumSize(new java.awt.Dimension(140, 30));
        jLabel8.setPreferredSize(new java.awt.Dimension(140, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 310);
        jPanel2.add(jLabel8, gridBagConstraints);

        especialidade.setVisible(false);
        especialidade.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        especialidade.setMaximumSize(new java.awt.Dimension(200, 30));
        especialidade.setMinimumSize(new java.awt.Dimension(200, 30));
        especialidade.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 250);
        jPanel2.add(especialidade, gridBagConstraints);

        especLabel.setVisible(false);
        especLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        especLabel.setForeground(new java.awt.Color(242, 242, 242));
        especLabel.setText("Especialidade:");
        especLabel.setMaximumSize(new java.awt.Dimension(200, 30));
        especLabel.setMinimumSize(new java.awt.Dimension(200, 30));
        especLabel.setPreferredSize(new java.awt.Dimension(200, 30));
        especLabel.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 250);
        jPanel2.add(especLabel, gridBagConstraints);

        nMedicoLabel.setVisible(false);
        nMedicoLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        nMedicoLabel.setForeground(new java.awt.Color(242, 242, 242));
        nMedicoLabel.setText("Número da Ordem:");
        nMedicoLabel.setMaximumSize(new java.awt.Dimension(130, 30));
        nMedicoLabel.setMinimumSize(new java.awt.Dimension(130, 30));
        nMedicoLabel.setPreferredSize(new java.awt.Dimension(125, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 150, 0, 0);
        jPanel2.add(nMedicoLabel, gridBagConstraints);

        numeroDeMedico.setVisible(false);
        numeroDeMedico.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        numeroDeMedico.setMaximumSize(new java.awt.Dimension(120, 30));
        numeroDeMedico.setMinimumSize(new java.awt.Dimension(120, 30));
        numeroDeMedico.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 150, 0, 0);
        jPanel2.add(numeroDeMedico, gridBagConstraints);

        concluirButton.setBackground(new java.awt.Color(0, 132, 193));
        concluirButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        concluirButton.setForeground(new java.awt.Color(242, 242, 242));
        concluirButton.setText("CONCLUIR");
        concluirButton.setMaximumSize(new java.awt.Dimension(150, 35));
        concluirButton.setMinimumSize(new java.awt.Dimension(150, 35));
        concluirButton.setPreferredSize(new java.awt.Dimension(150, 35));
        concluirButton.setSelected(true);
        concluirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                concluirButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 0, 15);
        jPanel2.add(concluirButton, gridBagConstraints);

        tipoFuncionario.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        tipoFuncionario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Secretaria", "Médico", "Gestor" }));
        tipoFuncionario.setMaximumSize(new java.awt.Dimension(80, 30));
        tipoFuncionario.setMinimumSize(new java.awt.Dimension(80, 30));
        tipoFuncionario.setPreferredSize(new java.awt.Dimension(100, 30));
        tipoFuncionario.addActionListener(this::tipoFuncionarioActionPerformed);
        tipoFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoFuncionarioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 70);
        jPanel2.add(tipoFuncionario, gridBagConstraints);

        numeroCC.setMaximumSize(new java.awt.Dimension(200, 30));
        numeroCC.setMinimumSize(new java.awt.Dimension(200, 30));
        numeroCC.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 70);
        jPanel2.add(numeroCC, gridBagConstraints);

        salaLabel.setVisible(false);
        salaLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        salaLabel.setForeground(new java.awt.Color(242, 242, 242));
        salaLabel.setText("Sala:");
        salaLabel.setMaximumSize(new java.awt.Dimension(50, 30));
        salaLabel.setMinimumSize(new java.awt.Dimension(50, 30));
        salaLabel.setPreferredSize(new java.awt.Dimension(50, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 390, 0, 0);
        jPanel2.add(salaLabel, gridBagConstraints);

        salaField.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        salaField.setMinimumSize(new java.awt.Dimension(50, 30));
        salaField.setPreferredSize(new java.awt.Dimension(50, 30));
        salaField.setVisible(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 390, 0, 0);
        jPanel2.add(salaField, gridBagConstraints);

        criarCredencial.add(jPanel2, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel3.add(criarCredencial, gridBagConstraints);

        eliminarCredencial.setBackground(new java.awt.Color(0, 149, 218));
        eliminarCredencial.setMinimumSize(new java.awt.Dimension(960, 35));
        eliminarCredencial.setOpaque(true);
        eliminarCredencial.setVisible(false);
        eliminarCredencial.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setHorizontalScrollBar(null);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(960, 550));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(960, 550));

        credenciaisPanel.setMinimumSize(new java.awt.Dimension(900, 0));
        credenciaisPanel.setPreferredSize(new java.awt.Dimension(900, 0));
        credenciaisPanel.setLayout(new java.awt.GridLayout(0, 1, 10, 10));
        jScrollPane1.setViewportView(credenciaisPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        eliminarCredencial.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel3.add(eliminarCredencial, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel3, gridBagConstraints);

        jPanel1.setBackground(new java.awt.Color(0, 149, 218));
        jPanel1.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        jPanel1.setMinimumSize(new java.awt.Dimension(1080, 60));
        jPanel1.setPreferredSize(new java.awt.Dimension(1080, 60));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("MediFlow");
        jLabel1.setMaximumSize(new java.awt.Dimension(250, 25));
        jLabel1.setPreferredSize(new java.awt.Dimension(140, 60));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 825);
        jPanel1.add(jLabel1, gridBagConstraints);

        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit.png"))); // NOI18N
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1015, 0, 0);
        jPanel1.add(exitButton, gridBagConstraints);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.png"))); // NOI18N
        jLabel12.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1000);
        jPanel1.add(jLabel12, gridBagConstraints);

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        refreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 925, 0, 0);
        jPanel1.add(refreshButton, gridBagConstraints);

        getContentPane().add(jPanel1, new java.awt.GridBagConstraints());

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Metodo acionado quando o botão para criar credenciais é pressionado
    private void botaoCriarCredencialActionPerformed(java.awt.event.ActionEvent evt){
        // Esconde a barra de pesquisa e o botao de pesquisa
        barraPesquisa.setVisible(false);// Esconde a barra de pesquisa
        botaoPesquisa.setVisible(false);// Esconde o botão de pesquisa
        // Exibe o painel de criação de credencial
        criarCredencial.setVisible(true);// Exibe o painel de criação de credenciais
        credenciaisPanel.setVisible(false); // Esconde o painel de credenciais
        eliminarCredencial.setVisible(false); // Esconde o painel de eliminação de credenciais

        carregarCredenciaisBaseDeDados(); // Carrega as credenciais existentes
    }                                                    
    
    // Metodo adicionado quando o botao para eliminar credenciais é clicado
    private void botaoEliminarCredencialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEliminarCredencialActionPerformed
        eliminarCredencial.setVisible(true); // Exibe o painel para eliminar credenciais
        credenciaisPanel.setVisible(true); // Exibe o painel de credenciais
        // Exibe a barra de pesquisa e o botão de pesquisa
        barraPesquisa.setVisible(true);// Exibe a barra de pesquisa
        botaoPesquisa.setVisible(true);// Exibe o botão de pesquisa
        criarCredencial.setVisible(false); // Esconde o painel de criação de credenciais

        // Chama o método para carregar as credenciais do banco de dados
        carregarCredenciaisBaseDeDados();
    }//GEN-LAST:event_botaoEliminarCredencialActionPerformed

    // Metodo adionado quando o botão de pesquisa é pressionado
    private void botaoPesquisaActionPerformed(java.awt.event.ActionEvent evt) {
        
    } 

    // Metodo acionado quando o botão de sair é pressionado
    private void exitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseClicked
        dispose();// Fecha a janela atual
        // Abir VistaDeLogin 
        new VistaDeLogin().setVisible(true);
    }//GEN-LAST:event_exitButtonMouseClicked

    // Metodo acionado quando a sleção do tipo de funcionario é alterada
    private void tipoFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoFuncionarioActionPerformed
        String tipoSelecionado = tipoFuncionario.getSelectedItem().toString();// Obtem o tipo de funcionario selecionado

        // Se o tipo de funcionario selecionado no combo box for medico mostra masi campos
        if ("Médico".equalsIgnoreCase(tipoSelecionado)) {// Se o tipo de funcionario selecionado no combo box for medico mostra masi campos
            especialidade.setVisible(true);// Mostra o campo de especialidade
            numeroDeMedico.setVisible(true);// Mostra o campo de numero de medico
            nMedicoLabel.setVisible(true);// Mostra o label de numero de medico
            especLabel.setVisible(true);// Mostra o label de especialidade
            salaLabel.setVisible(true);// Mostra o label de sala
            salaField.setVisible(true);// Mostra o campo de sala
        } else {
            // Caso contrario, esconde esses campos
            especialidade.setVisible(false);// Esconde o campo de especialidade
            numeroDeMedico.setVisible(false);// Esconde o campo de numero de medico
            nMedicoLabel.setVisible(false);// Esconde o label de numero de medico
            especLabel.setVisible(false);// Esconde o label de especialidade
            salaLabel.setVisible(false);// Esconde o label de sala
            salaField.setVisible(false);// Esconde o campo de sala
        }
        // Atualiza o painel para refletir as mudanças de visibilidade
        criarCredencial.revalidate();// Atualiza o painel de criação de credenciais
        criarCredencial.repaint();// Atualiza o painel de criação de credenciais
    }//GEN-LAST:event_tipoFuncionarioActionPerformed

    private void botaoPesquisaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoPesquisaMouseClicked
        String query = barraPesquisa.getText();// Obtem a query de pesquisa

        // Obtem uma lista de todos os utilziadores através do método "obterTodosUtilizadores"
        List<Utilizador> utilizadores = SqlGestor.obterTodosUtilizadores();
        // Cria uma nova lista para armazenar os utilizadores que correspondem ao filtro
        List<Utilizador> filteredUsers = new ArrayList<>();

        // Itera pela lista de utilizadores
        for (Utilizador utilizador : utilizadores) {
            // Veerifica se o ID ou nome contem a query fornecida
            if (String.valueOf(utilizador.getId()).contains(query) || utilizador.getNome().toLowerCase().contains(query.toLowerCase())) {// Verifica se o ID ou nome contem a query fornecida
                // Adiciona o utilizador à lista filtrada se a condiçãofor satisfeita
                filteredUsers.add(utilizador);
            }
        }

        // Se nenhum utilizador foi encontrasdo na pesquisa
        if (filteredUsers.isEmpty()) {
            // Mostra uma mensagem ao utilizador informado que nenhum resultado foi encontrado
            JOptionPane.showMessageDialog(this, "Nenhum utilizador encontrado.", "Pesquisa", JOptionPane.INFORMATION_MESSAGE);// Mostra uma mensagem ao utilizador informado que nenhum resultado foi encontrado
        } else {// Caso contrário
            credenciaisPanel.removeAll();// Limpa o painel de credenciais
            int tamanhoPainelCredenciais = 0;// Define o tamanho inicial do painel

            // Itera pela lista de utilizadores filtrados
            for (Utilizador utilizador : filteredUsers) {
                tamanhoPainelCredenciais += 100;// Incrementa o tamanho do painel
                credenciaisPanel.setPreferredSize(new java.awt.Dimension(960, tamanhoPainelCredenciais));// Define o tamanho do painel
                // Chama um metodo que cria e adiciona o painel correspondente ao utilizador
                criarPainelCredencial(utilizador);
            }

            // revalida o painel para refletir as alterações feitas dinamicamente
            credenciaisPanel.revalidate();
            credenciaisPanel.repaint();
        }
    }//GEN-LAST:event_botaoPesquisaMouseClicked

    // Metodo acionado quando o botão de atualizar é pressionado
    private void refreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMouseClicked
        getClinica().atualizarClinica();// Atualiza a clinica
        carregarCredenciaisBaseDeDados();// Carrega as credenciais existentes
    }//GEN-LAST:event_refreshButtonMouseClicked

    // Metodo acionado quando a barra de pesquisa é pressionada
    private void barraPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barraPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_barraPesquisaActionPerformed

    // metodo acionado quando o botao "Concluir" é pressionado para criar um novo utilizador
    private void concluirButtonActionPerformed(java.awt.event.ActionEvent evt) { //Cria um novo utilizador
        try {// Tenta executar o código

            String nome = nomeCompleto.getText();// Obtem o nome do utilizador
            String pessword = password.getText();// Obtem a password do utilizador
            String tipoUtilizador = tipoFuncionario.getSelectedItem().toString();// Obtem o tipo de utilizador selecionado
            int cc = Integer.parseInt(numeroCC.getText());// Converte o numero do CC para inteiro

            if (nome.isEmpty() || pessword.isEmpty() || tipoUtilizador.isEmpty()) {// Se algum dos campos obrigatórios estiver vazio
                JOptionPane.showMessageDialog(null,// Mostra uma mensagem de erro
                        "Por favor, preencha todos os campos obrigatórios.",
                        "Erro de Validação",
                        JOptionPane.ERROR_MESSAGE);// Mostra uma mensagem de erro
                return;
            }

            String ccString = String.valueOf(cc);// Converte o numero do CC para string

            if (ccString.length() != 8) {// Se o numero do CC não tiver 8 digitos
                JOptionPane.showMessageDialog(null,
                        "O número do CC deve ter exatamente 8 dígitos.",
                        "Erro de Validação",
                        JOptionPane.ERROR_MESSAGE);// Mostra uma mensagem de erro
                return;
            }

            // Variáveis específicas para médicos
            String espcialidade = "";// Inicializa a especialidade
            int numOrdem = 0;// Inicializa o número de ordem
            int sala = 0;// Inicializa a sala

            if ("Médico".equalsIgnoreCase(tipoUtilizador)) {// Se o tipo de utilizador for médico
                // Obter os valores adicionais para médicos
                espcialidade = especialidade.getText();// Obtem a especialidade
                numOrdem = Integer.parseInt(numeroDeMedico.getText());// Obtem o número de ordem
                sala = Integer.parseInt(salaField.getText());// Obtem a sala

                // Verificar se a sala já está ocupada
                for (int numSala : obterSalas()){// Itera pelas salas
                    if (numSala == sala){// Se a sala já estiver ocupada
                        JOptionPane.showMessageDialog(null,
                                "A sala já está ocupada.",
                                "Erro de Validação",
                                JOptionPane.ERROR_MESSAGE);// Mostra uma mensagem de erro
                        return;
                    }
                }
            }

            // Chamar o método para criar o utilizador e verificar se é médico
            int idUtilizador = criarUtilizador(nome, pessword, tipoUtilizador, cc, espcialidade, numOrdem, sala);

            // Exibir mensagem de sucesso
            if (idUtilizador != -1) {
                JOptionPane.showMessageDialog(null,"Utilizador criado com sucesso! ID: " + idUtilizador);// Mostra uma mensagem de sucesso
                // Limpa os campos
                nomeCompleto.setText("");// Limpa o campo de nome
                password.setText("");// Limpa o campo de password
                numeroCC.setText("");// Limpa o campo de numero do CC
                especialidade.setText("");// Limpa o campo de especialidade
                numeroDeMedico.setText("");// Limpa o campo de numero de medico
                salaField.setText("");// Limpa o campo de sala

                //Cria o objeto utilizador e carrega a base de dados

                Utilizador utilizador = new Utilizador( Utilizador.ultimoIdUtilizador() + 1,cc, nome, pessword, tipoUtilizador);// Cria um novo objeto do tipo Utilizador com um ID único baseado no último ID registrado
                getClinica().getUtilizador().add(utilizador);// Adiciona o utilizador à lista de utilizadores
                carregarCredenciaisBaseDeDados();// Carrega as credenciais existentes

            } else {// Caso contrário, exibe uma mensagem de erro
                JOptionPane.showMessageDialog(null,
                        "Erro ao criar utilizador. Verifique os dados inseridos.");// Mostra uma mensagem de erro
            }
        } catch (NumberFormatException ex) {// Se ocorrer um erro de formato
            JOptionPane.showMessageDialog(null,
                    "Por favor, insira dados válidos para CC ou Número da Ordem.",
                    "Erro de Validação",
                    JOptionPane.ERROR_MESSAGE);// Mostra uma mensagem de erro
        } catch (HeadlessException ex) {// Se ocorrer um erro de interface
            JOptionPane.showMessageDialog(null,
                    "Erro ao processar os dados: " + ex.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);// Mostra uma mensagem de erro
        }
    }

    /**
     * @param args the command line arguments
     */
    // Metodo principal que é chamado quando o programa é executado
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {// Cria e exibe a interface grafica
            new VistaGestor(passwordGestor).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField barraPesquisa;
    private javax.swing.JButton botaoCriarCredencial;
    private javax.swing.JButton botaoEliminarCredencial;
    private javax.swing.JLabel botaoPesquisa;
    private javax.swing.JButton concluirButton;
    private javax.swing.JPanel credenciaisPanel;
    private javax.swing.JLayeredPane criarCredencial;
    private javax.swing.JLayeredPane eliminarCredencial;
    private javax.swing.JLabel especLabel;
    private javax.swing.JTextField especialidade;
    private javax.swing.JLabel exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nMedicoLabel;
    private javax.swing.JTextField nomeCompleto;
    private javax.swing.JTextField numeroCC;
    private javax.swing.JTextField numeroDeMedico;
    private javax.swing.JTextField password;
    private javax.swing.JLabel refreshButton;
    private javax.swing.JTextField salaField;
    private javax.swing.JLabel salaLabel;
    private javax.swing.JComboBox<String> tipoFuncionario;
    // End of variables declaration//GEN-END:variables
}
