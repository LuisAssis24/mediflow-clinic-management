/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inter.face;

import javax.swing.*;

/**
 *
 * @author draga
 */
// Classe que representa a interface de receitar medicamentos
public class ReceitarMedicacao extends javax.swing.JFrame {

    /**
     * Creates new form ReceitarMedicacao
     */
    // Construtor da classe
    public ReceitarMedicacao() {
        initComponents();// Inicializa os componentes da interface

        // Configurar o modelo da lista
        DefaultListModel<String> medicamentoModel = new DefaultListModel<>();// Cria um novo modelo de lista
        jList1.setModel(medicamentoModel);// Define o modelo da lista

        configurarPopupMenu(jList1, medicamentoModel);// Configurar o menu de contexto para a lista
    }

    // Método para configurar o menu de contexto da lista
    private void configurarPopupMenu(JList<String> list, DefaultListModel<String> model) {
        // Criar o menu de contexto
        JPopupMenu popupMenu = new JPopupMenu();

        // Opção "Editar"
        JMenuItem editarItem = new JMenuItem("Editar");// Cria um novo item de menu
        editarItem.addActionListener(e -> {// Adiciona um listener ao item de menu
            int selectedIndex = list.getSelectedIndex();// Obtém o índice do item selecionado
            if (selectedIndex != -1) {// Se houver um item selecionado
                String valorAtual = model.get(selectedIndex);// Obtém o valor do item selecionado
                String novoValor = JOptionPane.showInputDialog(
                    this,
                    "Editar medicamento e quantidade (ex.: Paracetamol - 500mg):",
                    valorAtual
                );// Mostra um diálogo para editar o valor do item
                if (novoValor != null && !novoValor.trim().isEmpty()) {// Se o novo valor não for nulo nem vazio
                    model.set(selectedIndex, novoValor);// Atualiza o valor do item
                }
            }
        });

        // Opção "Adicionar"
        JMenuItem adicionarItem = new JMenuItem("Adicionar");// Cria um novo item de menu
        adicionarItem.addActionListener(e -> {// Adiciona um listener ao item de menu
            String novoMedicamento = JOptionPane.showInputDialog(
                this,
                "Adicionar medicamento e quantidade (ex.: 1xParacetamol - 500mg):"
            );// Mostra um diálogo para adicionar um novo item
            if (novoMedicamento != null && !novoMedicamento.trim().isEmpty()) {// Se o novo valor não for nulo nem vazio
                model.addElement(novoMedicamento);// Adiciona o novo item ao modelo da lista
            }
        });

        // Adicionar opções ao menu
        popupMenu.add(editarItem);
        popupMenu.add(adicionarItem);

        // Associar o menu de contexto à lista
        list.addMouseListener(new java.awt.event.MouseAdapter() {// Adiciona um listener de mouse à lista
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {// Sobrescreve o método de pressionar o botão do mouse
                if (evt.isPopupTrigger()) {// Se for um gatilho de menu de contexto
                    list.setSelectedIndex(list.locationToIndex(evt.getPoint()));// Define o índice selecionado com base na posição do mouse
                    popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());// Mostra o menu de contexto
                }
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {// Sobrescreve o método de soltar o botão do mouse
                if (evt.isPopupTrigger()) {// Se for um gatilho de menu de contexto
                    list.setSelectedIndex(list.locationToIndex(evt.getPoint()));// Define o índice selecionado com base na posição do mouse
                    popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());// Mostra o menu de contexto
                }
            }
        });
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        snsButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(400, 350));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(350, 200));

        jList1.setBackground(new java.awt.Color(242, 242, 242));
        jList1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 149, 218), 3, true));
        jList1.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.setPreferredSize(new java.awt.Dimension(350, 200));
        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        snsButton.setBackground(new java.awt.Color(0, 132, 193));
        snsButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        snsButton.setForeground(new java.awt.Color(242, 242, 242));
        snsButton.setText("CONCLUIR");
        snsButton.setMaximumSize(new java.awt.Dimension(120, 30));
        snsButton.setMinimumSize(new java.awt.Dimension(120, 30));
        snsButton.setPreferredSize(new java.awt.Dimension(120, 30));
        snsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        getContentPane().add(snsButton, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel1.setText("Receitar:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Método para ação do botão "CONCLUIR"
    private void snsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snsButtonActionPerformed
        DefaultListModel<String> model = (DefaultListModel<String>) jList1.getModel();// Obtém o modelo da lista
        boolean formatoCorreto = true;// Variável para verificar se o formato dos itens está correto

        // Verificar o formato de cada item
        for (int i = 0; i < model.size(); i++) {// Para cada item no modelo
            String item = model.get(i);// Obtém o item
            if (!item.matches("^\\d+x[A-Za-zÀ-ÿ\\s]+ - \\d+mg$")) {// Se o item não corresponder ao padrão
                formatoCorreto = false;// Define que o formato não está correto
                JOptionPane.showMessageDialog(
                    this,
                    "O item \"" + item + "\" está em um formato inválido.\nUse o formato: 1xParacetamol - 500mg",
                    "Erro de Formato",
                    JOptionPane.ERROR_MESSAGE// Mostra uma mensagem de erro
                );
                break;
            }
        }

        if (formatoCorreto) {// Se o formato estiver correto
            // Mostrar opções de "Enviar para SNS" ou "Imprimir"
            int escolha = JOptionPane.showOptionDialog(
                this,
                "Escolha a ação:",
                "Concluir Receita",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new Object[]{"Enviar para SNS", "Imprimir"},
                "Enviar para SNS"
            );// Mostra um diálogo de escolha

            if (escolha == JOptionPane.YES_OPTION) {// Se a escolha for "Enviar para SNS"
                JOptionPane.showMessageDialog(this, "Receita enviada para o SNS!");// Mostra uma mensagem de sucesso
            } else if (escolha == JOptionPane.NO_OPTION) {// Se a escolha for "Imprimir"
                JOptionPane.showMessageDialog(this, "Receita imprimida!");// Mostra uma mensagem de sucesso
            }

            // Fechar a janela
            dispose();
        }
    }//GEN-LAST:event_snsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    // Método principal
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReceitarMedicacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReceitarMedicacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReceitarMedicacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReceitarMedicacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReceitarMedicacao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton snsButton;
    // End of variables declaration//GEN-END:variables
}
