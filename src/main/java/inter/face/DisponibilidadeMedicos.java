/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inter.face;

import javax.swing.*;
import java.util.ArrayList;
import java.util.List;

import static medi.flow.Main.getClinica;
import static sql.server.SqlSecretaria.obterTodosMedicos;

/**
 *
 * @author Luis
 */
public class DisponibilidadeMedicos extends javax.swing.JFrame {
    
    /**
     * Creates new form DisponibilidadeMedicos
     */
    public DisponibilidadeMedicos() {
        initComponents(); // Inicializa os componentes da interface gráfica
        carregarMedicosBaseDeDados(); // Carrega os dados  dos médicos na interface
    }
    
    void carregarMedicosBaseDeDados(){ //Carrega as consultas existentes de acordo com os dados fornecidos pelo SBGD
        int tamanhoPainelConsultas = 0;// Tamanho do painel de consultas
        List<String[]> medicos = getClinica().getMedicos(); // Obtem todos os médicos da base de dados

        // Simula a criação de 15 paineis de médicos
        for (String [] medico : medicos) {
            String id = medico[0]; // ID do médico
            String espec = medico[1]; // Especialidade do médico
            tamanhoPainelConsultas += 50; // Aumenta o tamanho do painel de consultas
            medicosPanel.setPreferredSize(new java.awt.Dimension(520, tamanhoPainelConsultas));
            criarPainelMedico(id,espec); // Adiciona um painel de medico ao conteiner
        }
         //Faz o scroll começar em cima
        SwingUtilities.invokeLater(() -> {
            JScrollBar verticalScrollBar = jScrollPane1.getVerticalScrollBar();
            verticalScrollBar.setValue(verticalScrollBar.getMinimum());
        });
        
        // Atualiza a interface após a adição dos componentes
        medicosPanel.revalidate();
        medicosPanel.repaint();
    }
        
    void criarPainelMedico(String id , String espec){ //Adiciona uma consulta ao painel
        MedicoPanel medico = new MedicoPanel(id, espec); // Criação de um painel do tipo "Medico"
        medicosPanel.add(medico); // Adiciona o painel ao conteiner principal
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel7 = new javax.swing.JPanel();
        barraPesquisa = new javax.swing.JTextField();
        refresh = new javax.swing.JLabel();
        botaoPesquisa = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        medicosPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(520, 520));
        setMinimumSize(new java.awt.Dimension(520, 520));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel7.setBackground(new java.awt.Color(0, 149, 218));
        jPanel7.setMaximumSize(new java.awt.Dimension(520, 50));
        jPanel7.setMinimumSize(new java.awt.Dimension(520, 50));
        jPanel7.setPreferredSize(new java.awt.Dimension(520, 50));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        barraPesquisa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        barraPesquisa.setMinimumSize(new java.awt.Dimension(350, 35));
        barraPesquisa.setPreferredSize(new java.awt.Dimension(250, 35));
        barraPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barraPesquisaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(barraPesquisa, gridBagConstraints);

        refresh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        refresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        jPanel7.add(refresh, gridBagConstraints);

        botaoPesquisa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        botaoPesquisa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoPesquisaMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 130);
        jPanel7.add(botaoPesquisa, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        getContentPane().add(jPanel7, gridBagConstraints);

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(520, 0));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(520, 470));

        medicosPanel.setMaximumSize(new java.awt.Dimension(520, 100000));
        medicosPanel.setMinimumSize(new java.awt.Dimension(520, 0));
        medicosPanel.setPreferredSize(new java.awt.Dimension(520, 470));
        medicosPanel.setLayout(new java.awt.GridLayout(0, 1, 10, 10));
        jScrollPane1.setViewportView(medicosPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void barraPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barraPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_barraPesquisaActionPerformed

    private void refreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshMouseClicked
        medicosPanel.removeAll(); // Limpa o painel de médicos
        carregarMedicosBaseDeDados(); // Carrega os médicos da base de dados
    }//GEN-LAST:event_refreshMouseClicked

    private void botaoPesquisaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoPesquisaMouseClicked
        String especialidadePesquisa = barraPesquisa.getText().trim(); // Obtem o texto da barra de pesquisa

        // Verifica se o campo de pesquisa está vazio
        if (especialidadePesquisa == null || especialidadePesquisa.isEmpty()) {// Se o campo de pesquisa estiver vazio
            JOptionPane.showMessageDialog(this, "Por favor, insira uma especialidade.", "Erro", JOptionPane.ERROR_MESSAGE);// Mostra uma mensagem de erro
            return;
        }

        List<String[]> medicos = obterTodosMedicos(); // Obtem todos os médicos da base de dados
        List<String[]> medicosFiltrados = new ArrayList<>();// Lista de médicos filtrados

        // Filtra os médicos pela especialidade
        for (String[] medico : medicos) {// Para cada médico
            if (medico[1].equalsIgnoreCase(especialidadePesquisa)) {// Se a especialidade do médico for igual à especialidade pesquisada
                medicosFiltrados.add(medico);// Adiciona o médico à lista de médicos filtrados
            }
        }

        medicosPanel.removeAll(); // Limpa o painel de médicos

        // Verifica se há resultados
        if (medicosFiltrados.isEmpty()) {// Se não houver resultados
            JOptionPane.showMessageDialog(this, "Nenhum médico encontrado com a especialidade: " + especialidadePesquisa, "Informação", JOptionPane.INFORMATION_MESSAGE);// Mostra uma mensagem de informação
        } else {// Se houver resultados
            int tamanhoPainelMedicos = 0;// Tamanho do painel de médicos
            for (String[] medico : medicosFiltrados) {// Para cada médico filtrado
                criarPainelMedico(medico[0], medico[1]); // Cria e adiciona o painel de médico
                tamanhoPainelMedicos += 50; // Incrementa o tamanho do painel
            }
            medicosPanel.setPreferredSize(new java.awt.Dimension(520, tamanhoPainelMedicos));// Define o tamanho do painel de médicos
            medicosPanel.revalidate();// Atualiza o painel de médicos
            medicosPanel.repaint();// Atualiza o painel de médicos
        }        // TODO add your handling code here:
    }//GEN-LAST:event_botaoPesquisaMouseClicked

    /**
     * @param args the command line arguments
     */
    // Método principal
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisponibilidadeMedicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisponibilidadeMedicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisponibilidadeMedicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisponibilidadeMedicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {// Cria e mostra a interface
            public void run() {
                new DisponibilidadeMedicos().setVisible(true);
            }// Executa a interface
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField barraPesquisa;
    private javax.swing.JLabel botaoPesquisa;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel medicosPanel;
    private javax.swing.JLabel refresh;
    // End of variables declaration//GEN-END:variables
}
