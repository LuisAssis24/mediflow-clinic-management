/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inter.face;
import java.awt.HeadlessException;
import java.text.*;
import javax.swing.*;

import medi.flow.*;
import java.util.*;
import java.util.Date;

import sql.server.SqlSecretaria;

import static medi.flow.Main.getClinica;
import static medi.flow.Text.nomeMedicoTransform;

/**
 *
 * @author Luis
 */
// Classe que representa a interface gráfica da secretária
public final class VistaSecretaria extends javax.swing.JFrame {
    static String dataConsultaHorario = null; // Variável que armazena a data da consulta
    static String passwordSecretaria; // Password do secretario

    /**
     * Creates new form VistaSecretaria
     */
    // Construtor da classe
    public VistaSecretaria(String passwordSecretaria) {
        initComponents(); // Inicializa os componentes da interface
        carregarConsultasBaseDeDados(); // Carrega as consultas da base de dados
        this.passwordSecretaria = passwordSecretaria; // Password do secretario que está a usar o sistema
    }

    // Método que carrega as consultas da base de dados
    void carregarConsultasBaseDeDados() {
        consultasPanel.removeAll(); // Limpa o painel para evitar duplicações
        int tamanhoPainelConsultas = 0; // Reseta o tamanho do painel de consultas

        // Obtem as consultas da base de dados
        List<Consulta> consultas = getClinica().getConsultas();
        for(Consulta consulta : consultas) {// Para cada consulta
            // Cria um painel com os dados da Consulta>
            tamanhoPainelConsultas += 100; // aumenta o tamanho do painel de consultas
            consultasPanel.setPreferredSize(new java.awt.Dimension(960, tamanhoPainelConsultas));// Define o tamanho do painel de consultas
            criarPainelConsulta(consulta); // cria um painel de consulta
        }

        // Move a barra de scroll para o topo do painel de consultas
        SwingUtilities.invokeLater(() -> {// Move a barra de scroll para o topo do painel de consultas
            JScrollBar verticalScrollBar = jScrollPane1.getVerticalScrollBar();// Obtem a barra de scroll vertical
            verticalScrollBar.setValue(verticalScrollBar.getMinimum());// Move a barra de scroll para o topo
        });

        // Atualiza a interface gráfica para refletir as mudanças
        consultasPanel.revalidate();// Atualiza o painel de consultas
        consultasPanel.repaint();// Atualiza o painel de consultas
    }

    // Método que cria um painel de consulta
    void criarPainelConsulta(Consulta consulta) {
        // Cria um painel de consulta com os dados fornecidos 
        ConsultaFuncionario consultaPanel = new ConsultaFuncionario(consulta); // Cria um painel de consulta
        consultasPanel.add(consultaPanel);  // Adiciona o painel criado ao painel principal de consultas
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        exitButton = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        barraPesquisa = new javax.swing.JTextField();
        botaoVerConsultas = new javax.swing.JButton();
        botaoMarcarConsultas = new javax.swing.JButton();
        botaoPesquisa = new javax.swing.JLabel();
        marcarConsultas = new javax.swing.JLayeredPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nomePaciente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        contactoPaciente = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        nSns = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        motivoConsulta = new javax.swing.JTextArea();
        motivoConsulta.setLineWrap(true);
        motivoConsulta.setWrapStyleWord(true);
        jLabel8 = new javax.swing.JLabel();
        dataConsulta = new javax.swing.JFormattedTextField();
        botaoMarcar = new javax.swing.JButton();
        label = new javax.swing.JLabel();
        horaConsulta = new javax.swing.JFormattedTextField();
        botaoHorarios = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        idMedico = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        salaConsulta = new javax.swing.JTextField();
        botaoPacientes = new javax.swing.JButton();
        verConsultas = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        consultasPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(0, 149, 218));
        jPanel1.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        jPanel1.setMinimumSize(new java.awt.Dimension(1080, 60));
        jPanel1.setPreferredSize(new java.awt.Dimension(1080, 60));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("MediFlow");
        jLabel1.setMaximumSize(new java.awt.Dimension(250, 25));
        jLabel1.setPreferredSize(new java.awt.Dimension(140, 60));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 825);
        jPanel1.add(jLabel1, gridBagConstraints);

        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit.png"))); // NOI18N
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1015, 0, 0);
        jPanel1.add(exitButton, gridBagConstraints);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.png"))); // NOI18N
        jLabel12.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1000);
        jPanel1.add(jLabel12, gridBagConstraints);

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        refreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 925, 0, 0);
        jPanel1.add(refreshButton, gridBagConstraints);

        getContentPane().add(jPanel1, new java.awt.GridBagConstraints());

        jPanel3.setMinimumSize(new java.awt.Dimension(1080, 660));
        jPanel3.setPreferredSize(new java.awt.Dimension(1080, 660));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel7.setBackground(new java.awt.Color(0, 149, 218));
        jPanel7.setPreferredSize(new java.awt.Dimension(960, 50));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        barraPesquisa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        barraPesquisa.setMinimumSize(new java.awt.Dimension(350, 35));
        barraPesquisa.setPreferredSize(new java.awt.Dimension(350, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(barraPesquisa, gridBagConstraints);

        botaoVerConsultas.setBackground(new java.awt.Color(0, 132, 193));
        botaoVerConsultas.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        botaoVerConsultas.setForeground(new java.awt.Color(242, 242, 242));
        botaoVerConsultas.setText("Ver Consultas");
        botaoVerConsultas.setMaximumSize(new java.awt.Dimension(140, 35));
        botaoVerConsultas.setMinimumSize(new java.awt.Dimension(140, 35));
        botaoVerConsultas.setPreferredSize(new java.awt.Dimension(140, 35));
        botaoVerConsultas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVerConsultasActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(botaoVerConsultas, gridBagConstraints);

        botaoMarcarConsultas.setBackground(new java.awt.Color(0, 132, 193));
        botaoMarcarConsultas.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        botaoMarcarConsultas.setForeground(new java.awt.Color(242, 242, 242));
        botaoMarcarConsultas.setText("Marcar Consulta");
        botaoMarcarConsultas.setMargin(new java.awt.Insets(2, 0, 3, 0));
        botaoMarcarConsultas.setMaximumSize(new java.awt.Dimension(150, 35));
        botaoMarcarConsultas.setMinimumSize(new java.awt.Dimension(140, 35));
        botaoMarcarConsultas.setPreferredSize(new java.awt.Dimension(140, 35));
        botaoMarcarConsultas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoMarcarConsultasActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel7.add(botaoMarcarConsultas, gridBagConstraints);

        botaoPesquisa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        botaoPesquisa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoPesquisaMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 200);
        jPanel7.add(botaoPesquisa, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanel3.add(jPanel7, gridBagConstraints);

        marcarConsultas.setBackground(new java.awt.Color(0, 149, 218));
        marcarConsultas.setMinimumSize(new java.awt.Dimension(960, 550));
        marcarConsultas.setOpaque(true);
        marcarConsultas.setVisible(false);
        marcarConsultas.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(0, 149, 218));
        jPanel2.setMinimumSize(new java.awt.Dimension(960, 550));
        jPanel2.setPreferredSize(new java.awt.Dimension(960, 550));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(242, 242, 242));
        jLabel2.setText("DADOS DO PACIENTE");
        jLabel2.setMaximumSize(new java.awt.Dimension(200, 30));
        jLabel2.setMinimumSize(new java.awt.Dimension(200, 30));
        jLabel2.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 250);
        jPanel2.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(242, 242, 242));
        jLabel3.setText("Nome Completo:");
        jLabel3.setMaximumSize(new java.awt.Dimension(450, 30));
        jLabel3.setMinimumSize(new java.awt.Dimension(450, 30));
        jLabel3.setPreferredSize(new java.awt.Dimension(450, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(jLabel3, gridBagConstraints);

        nomePaciente.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        nomePaciente.setMaximumSize(new java.awt.Dimension(450, 30));
        nomePaciente.setMinimumSize(new java.awt.Dimension(450, 30));
        nomePaciente.setPreferredSize(new java.awt.Dimension(450, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel2.add(nomePaciente, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(242, 242, 242));
        jLabel4.setText("N.º SNS:");
        jLabel4.setMaximumSize(new java.awt.Dimension(200, 30));
        jLabel4.setMinimumSize(new java.awt.Dimension(200, 30));
        jLabel4.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 250);
        jPanel2.add(jLabel4, gridBagConstraints);

        contactoPaciente.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        contactoPaciente.setMaximumSize(new java.awt.Dimension(200, 30));
        contactoPaciente.setMinimumSize(new java.awt.Dimension(200, 30));
        contactoPaciente.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 250, 0, 0);
        jPanel2.add(contactoPaciente, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(242, 242, 242));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Contacto:");
        jLabel5.setMaximumSize(new java.awt.Dimension(200, 30));
        jLabel5.setMinimumSize(new java.awt.Dimension(200, 30));
        jLabel5.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 250, 0, 0);
        jPanel2.add(jLabel5, gridBagConstraints);

        nSns.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        nSns.setMaximumSize(new java.awt.Dimension(200, 30));
        nSns.setMinimumSize(new java.awt.Dimension(200, 30));
        nSns.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 250);
        jPanel2.add(nSns, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(242, 242, 242));
        jLabel6.setText("DADOS DA CONSULTA");
        jLabel6.setMaximumSize(new java.awt.Dimension(450, 30));
        jLabel6.setMinimumSize(new java.awt.Dimension(450, 30));
        jLabel6.setPreferredSize(new java.awt.Dimension(450, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel2.add(jLabel6, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(242, 242, 242));
        jLabel7.setText("Motivo:");
        jLabel7.setMaximumSize(new java.awt.Dimension(150, 30));
        jLabel7.setMinimumSize(new java.awt.Dimension(150, 30));
        jLabel7.setPreferredSize(new java.awt.Dimension(150, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 300);
        jPanel2.add(jLabel7, gridBagConstraints);

        motivoConsulta.setColumns(20);
        motivoConsulta.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        motivoConsulta.setRows(5);
        motivoConsulta.setMinimumSize(new java.awt.Dimension(300, 200));
        motivoConsulta.setPreferredSize(new java.awt.Dimension(450, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        jPanel2.add(motivoConsulta, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(242, 242, 242));
        jLabel8.setText("Data:");
        jLabel8.setMaximumSize(new java.awt.Dimension(200, 30));
        jLabel8.setMinimumSize(new java.awt.Dimension(200, 30));
        jLabel8.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 250);
        jPanel2.add(jLabel8, gridBagConstraints);

        dataConsulta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        dataConsulta.setMaximumSize(new java.awt.Dimension(200, 30));
        dataConsulta.setMinimumSize(new java.awt.Dimension(200, 30));
        dataConsulta.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 250);
        jPanel2.add(dataConsulta, gridBagConstraints);

        botaoMarcar.setBackground(new java.awt.Color(0, 132, 193));
        botaoMarcar.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        botaoMarcar.setForeground(new java.awt.Color(242, 242, 242));
        botaoMarcar.setText("MARCAR");
        botaoMarcar.setMaximumSize(new java.awt.Dimension(150, 35));
        botaoMarcar.setMinimumSize(new java.awt.Dimension(150, 35));
        botaoMarcar.setPreferredSize(new java.awt.Dimension(150, 35));
        botaoMarcar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoMarcarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 0, 0);
        jPanel2.add(botaoMarcar, gridBagConstraints);

        label.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        label.setForeground(new java.awt.Color(242, 242, 242));
        label.setText("Hora:");
        label.setMaximumSize(new java.awt.Dimension(200, 30));
        label.setMinimumSize(new java.awt.Dimension(200, 30));
        label.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 250, 0, 0);
        jPanel2.add(label, gridBagConstraints);

        horaConsulta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        horaConsulta.setMaximumSize(new java.awt.Dimension(200, 30));
        horaConsulta.setMinimumSize(new java.awt.Dimension(200, 30));
        horaConsulta.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(0, 250, 0, 0);
        jPanel2.add(horaConsulta, gridBagConstraints);

        botaoHorarios.setBackground(new java.awt.Color(0, 132, 193));
        botaoHorarios.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        botaoHorarios.setForeground(new java.awt.Color(242, 242, 242));
        botaoHorarios.setText("DISPONIBILIDADE");
        botaoHorarios.setMargin(new java.awt.Insets(2, 0, 3, 0));
        botaoHorarios.setMaximumSize(new java.awt.Dimension(150, 35));
        botaoHorarios.setMinimumSize(new java.awt.Dimension(150, 35));
        botaoHorarios.setPreferredSize(new java.awt.Dimension(150, 35));
        botaoHorarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoHorariosActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 0, 0);
        jPanel2.add(botaoHorarios, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(242, 242, 242));
        jLabel9.setText("ID do Médico:");
        jLabel9.setMaximumSize(new java.awt.Dimension(200, 30));
        jLabel9.setMinimumSize(new java.awt.Dimension(200, 30));
        jLabel9.setPreferredSize(new java.awt.Dimension(100, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 350);
        jPanel2.add(jLabel9, gridBagConstraints);

        idMedico.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        idMedico.setMaximumSize(new java.awt.Dimension(200, 30));
        idMedico.setMinimumSize(new java.awt.Dimension(200, 30));
        idMedico.setPreferredSize(new java.awt.Dimension(100, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 150);
        jPanel2.add(idMedico, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(242, 242, 242));
        jLabel10.setText("Sala:");
        jLabel10.setToolTipText("");
        jLabel10.setMaximumSize(new java.awt.Dimension(40, 30));
        jLabel10.setMinimumSize(new java.awt.Dimension(40, 30));
        jLabel10.setPreferredSize(new java.awt.Dimension(40, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(15, 90, 0, 0);
        jPanel2.add(jLabel10, gridBagConstraints);

        salaConsulta.setMaximumSize(new java.awt.Dimension(100, 30));
        salaConsulta.setMinimumSize(new java.awt.Dimension(100, 30));
        salaConsulta.setPreferredSize(new java.awt.Dimension(100, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(15, 230, 0, 0);
        jPanel2.add(salaConsulta, gridBagConstraints);

        botaoPacientes.setBackground(new java.awt.Color(0, 132, 193));
        botaoPacientes.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        botaoPacientes.setForeground(new java.awt.Color(242, 242, 242));
        botaoPacientes.setText("Procurar Paciente");
        botaoPacientes.setMargin(new java.awt.Insets(2, 0, 3, 0));
        botaoPacientes.setMaximumSize(new java.awt.Dimension(150, 35));
        botaoPacientes.setMinimumSize(new java.awt.Dimension(150, 35));
        botaoPacientes.setPreferredSize(new java.awt.Dimension(150, 35));
        botaoPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPacientesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 300, 0, 0);
        jPanel2.add(botaoPacientes, gridBagConstraints);

        marcarConsultas.add(jPanel2, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel3.add(marcarConsultas, gridBagConstraints);

        verConsultas.setBackground(new java.awt.Color(0, 149, 218));
        verConsultas.setMinimumSize(new java.awt.Dimension(960, 35));
        verConsultas.setOpaque(true);
        verConsultas.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setHorizontalScrollBar(null);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(960, 550));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(960, 550));

        consultasPanel.setMinimumSize(new java.awt.Dimension(900, 0));
        consultasPanel.setPreferredSize(new java.awt.Dimension(900, 0));
        consultasPanel.setLayout(new java.awt.GridLayout(0, 1, 10, 10));
        jScrollPane1.setViewportView(consultasPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        verConsultas.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel3.add(verConsultas, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel3, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Método que é chamado quando o botão "Ver Consultas" é clicado
    private void botaoVerConsultasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVerConsultasActionPerformed
        // Verifica se o painel "verConsultas" está oculto
        if (!verConsultas.isVisible()){// Se estiver oculto
            barraPesquisa.setVisible(true);// Torna a barra de pesquisa visível
            botaoPesquisa.setVisible(true);// Torna o botão de pesquisa visível
            verConsultas.setVisible(true);// Torna o painel de consultas visível
            marcarConsultas.setVisible(false);// Oculta o painel de marcar consultas
        }
        // Recarrega as consultas da base de dados
        carregarConsultasBaseDeDados();
    }//GEN-LAST:event_botaoVerConsultasActionPerformed

    // Método que é chamado quando o botão "Marcar Consultas" é clicado
    private void botaoMarcarConsultasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoMarcarConsultasActionPerformed
        // Verifica se o painel "marcarConsultas" está oculto
        if (!marcarConsultas.isVisible()){// Se estiver oculto
            barraPesquisa.setVisible(false);// Torna a barra de pesquisa invisível
            botaoPesquisa.setVisible(false);// Torna o botão de pesquisa invisível
            marcarConsultas.setVisible(true);// Torna o painel de marcar consultas visível
            verConsultas.setVisible(false);// Oculta o painel de consultas
            nomePaciente.setText("");// Limpa o campo de nome do paciente
            contactoPaciente.setText("");// Limpa o campo de contacto do paciente
            nSns.setText("");// Limpa o campo de sns do paciente
            motivoConsulta.setText("");// Limpa o campo de motivo da consulta
            dataConsulta.setText("");// Limpa o campo de data da consulta
            horaConsulta.setText("");// Limpa o campo de hora da consulta
            idMedico.setText("");// Limpa o campo de id do médico
        }
    }//GEN-LAST:event_botaoMarcarConsultasActionPerformed

    // Método que é chamado quando o botão "Pesquisar" é clicado
    private void botaoPesquisaActionPerformed(java.awt.event.ActionEvent evt) {
    
    }                                               

    // Método que é chamado quando o botão "DISPONIBILIDADE" é clicado
    private void botaoHorariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoHorariosActionPerformed
        if (dataConsulta.getText().isEmpty()) {// Verifica se o campo de data está vazio
            JOptionPane.showMessageDialog(this, "Por favor, insira a data da consulta.", "Erro", JOptionPane.ERROR_MESSAGE);// Mostra uma mensagem de erro
            return;
        }
        dataConsultaHorario = dataConsulta.getText(); // Armazena a data da consulta pra usar na disponibilidade de médicos
        DisponibilidadeMedicos disp = new DisponibilidadeMedicos();// Cria uma nova janela de disponibilidade de médicos
        disp.setVisible(true);// Torna a janela visível
    }//GEN-LAST:event_botaoHorariosActionPerformed

    // Método que é chamado quando o botão "Procurar Paciente" é clicado
    private void botaoPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPacientesActionPerformed
        int num = Integer.parseInt(nSns.getText());// Obter o número de sns do campo de texto

        // Verificar se o paciente existe
        String[] dadosPaciennte = getClinica().obterPacientePorSns(num);// Obter os dados do paciente
        if (dadosPaciennte != null) {// Se o paciente existir
            nomePaciente.setText(dadosPaciennte[0]);// Preencher o campo de nome do paciente
            contactoPaciente.setText(dadosPaciennte[1]);// Preencher o campo de contacto do paciente
        } else {// Se o paciente não existir
            JOptionPane.showMessageDialog(this, "Paciente não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);// Mostrar uma mensagem de erro
        }
    }//GEN-LAST:event_botaoPacientesActionPerformed

    // Método que é chamado quando o botão "Sair" é clicado
    private void exitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseClicked
        dispose();// Fechar a janela
        // Abir VistaDeLogin 
        new VistaDeLogin().setVisible(true);// Tornar a janela de login visível
    }//GEN-LAST:event_exitButtonMouseClicked

    private void botaoPesquisaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoPesquisaMouseClicked
            String inputPesquisa = barraPesquisa.getText().trim(); // Obtem o texto da barra de pesquisa

        // Verifica se o campo de pesquisa está vazio
        if (inputPesquisa == null || inputPesquisa.isEmpty()) {// Se estiver vazio
            JOptionPane.showMessageDialog(this, "Por favor, insira um número de SNS ou nome do paciente.", "Erro", JOptionPane.ERROR_MESSAGE);// Mostra uma mensagem de erro
            return;
        }

        List<Consulta> consultas = getClinica().getConsultas(); // Obtem todas as consultas da base de dados
        List<Consulta> consultasFiltradas = new ArrayList<>(); // Cria uma lista para armazenar as consultas filtradas

        // Verifica se o valor inserido é um número (pesquisa por nSns)
        if (inputPesquisa.matches("\\d+")) {// Se for um número
            int snsPaciente = Integer.parseInt(inputPesquisa);// Converte o valor para inteiro
            for (Consulta consulta : consultas) {// Para cada consulta
                if (consulta.getSnsPaciente() == snsPaciente) {// Se o sns do paciente for igual ao sns inserido
                    consultasFiltradas.add(consulta);// Adiciona a consulta à lista de consultas filtradas
                }
            }
        } else { // Pesquisa por nome do paciente
            for (Consulta consulta : consultas) {// Para cada consulta
                if (consulta.getNomePaciente().toLowerCase().contains(inputPesquisa.toLowerCase())) {// Se o nome do paciente contiver o valor inserido
                    consultasFiltradas.add(consulta);// Adiciona a consulta à lista de consultas filtradas
                }
            }
        }

        consultasPanel.removeAll(); // Limpa o painel de consultas

        // Verifica se há resultados
        if (consultasFiltradas.isEmpty()) {// Se não houver resultados
            JOptionPane.showMessageDialog(this, "Consulta não encontrada!", "Erro", JOptionPane.INFORMATION_MESSAGE);// Mostra uma mensagem de erro
        } else {// Se houver resultados
            int tamanhoPainelConsultas = 0;// Inicializa o tamanho do painel de consultas
            for (Consulta consulta : consultasFiltradas) {// Para cada consulta filtrada
                criarPainelConsulta(consulta); // Cria e adiciona o painel de consulta
                tamanhoPainelConsultas += 100; // Incrementa o tamanho do painel
            }
            consultasPanel.setPreferredSize(new java.awt.Dimension(960, tamanhoPainelConsultas));// Define o tamanho do painel de consultas
            consultasPanel.revalidate();// Atualiza o painel de consultas
            consultasPanel.repaint();// Atualiza o painel de consultas
        }
    }//GEN-LAST:event_botaoPesquisaMouseClicked

    private void refreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMouseClicked
        getClinica().atualizarClinica();// Atualiza as consultas
        carregarConsultasBaseDeDados();// Carrega as consultas da base de dados
    }//GEN-LAST:event_refreshButtonMouseClicked

    // Método que é chamado quando o botão "Marcar" é clicado
    private void botaoMarcarActionPerformed(java.awt.event.ActionEvent evt) {
        try {// Tenta executar o código
            // Obter os valores dos campos da interface
            String nome = nomePaciente.getText();// Obter o nome do paciente
            String numeroSnsStr = nSns.getText();// Obter o número de sns do paciente
            String motivo = motivoConsulta.getText();// Obter o motivo da consulta
            String data = dataConsulta.getText();// Obter a data da consulta
            String hora = horaConsulta.getText();// Obter a hora da consulta
            String idMedicoStr = idMedico.getText();// Obter o id do médico
            String idSalaStr = salaConsulta.getText();// Obter o id da sala
            String contacto = contactoPaciente.getText();// Obter o contacto do paciente

            // Verificar se algum campo está vazio
            if (nome.isEmpty() || numeroSnsStr.isEmpty() || motivo.isEmpty() || data.isEmpty() || hora.isEmpty() || idMedicoStr.isEmpty() || idSalaStr.isEmpty() || contacto.isEmpty()) {// Se algum campo estiver vazio
                JOptionPane.showMessageDialog(this, "Preencha todos os campos", "Erro", JOptionPane.ERROR_MESSAGE);// Mostrar uma mensagem de erro
                return;
            }

            // Verificar se o contacto tem 9 dígitos e não começa com 0
            if (contacto.length() != 9 || contacto.charAt(0) == '0') {// Se o contacto não tiver 9 dígitos ou começar com 0
                JOptionPane.showMessageDialog(this, "O contacto deve ter exatamente 9 dígitos e não pode começar com 0.", "Erro de Formatação", JOptionPane.ERROR_MESSAGE);// Mostrar uma mensagem de erro
                return;
            }

            //Verificar se o número de sns tem 9 dígitos e não começa com 0
            if (numeroSnsStr.length() != 9 || numeroSnsStr.charAt(0) == '0')  {// Se o número de sns não tiver 9 dígitos ou começar com 0
                JOptionPane.showMessageDialog(this, "O número de SNS deve ter exatamente 9 dígitos.", "Erro de Formatação", JOptionPane.ERROR_MESSAGE);// Mostrar uma mensagem de erro
                return;
            }

            // Converter os valores para os tipos corretos
            int numeroSns = Integer.parseInt(numeroSnsStr);// Converter o número de sns para inteiro
            int idMedicoInt = Integer.parseInt(idMedicoStr);// Converter o id do médico para inteiro
            int idSala = Integer.parseInt(idSalaStr);// Converter o id da sala para inteiro
            int contactoInt = Integer.parseInt(contacto);// Converter o contacto para inteiro


            // Verificar se a data e hora da consulta são no futuro
            Date dataHoraConsulta = Text.dataJavaParaSql(data, hora);// Converter a data e hora da consulta para o formato de data e hora
            Date dataHoraAtual = new Date();// Obter a data e hora atuais

            if (dataHoraConsulta.before(dataHoraAtual)) {// Se a data da consulta for antes da data atual
                JOptionPane.showMessageDialog(this, "A consulta não pode ser marcada no passado.", "Erro", JOptionPane.ERROR_MESSAGE);// Mostrar uma mensagem de erro
                return;
            }

            // Criar o Paciente Caso ele não exista e adcionar ao objeto clinica
            boolean bool = SqlSecretaria.criarPaciente(numeroSns, nome, contactoInt);// Verificar se o paciente já existe
            if (bool == true) {// Se o paciente não existir
                getClinica().addPaciente(new Paciente(numeroSns, nome, contactoInt));// Adicionar o paciente à lista de pacientes
                SqlSecretaria.criarNovoRC(numeroSns);// Criar um novo registo clinico para o paciente
            }



            // Obter o nome do médico e formatá-lo
            String nomeMedUnformat = getClinica().obterNomeMedicoPorId(idMedicoInt);// Obter o nome do médico
            String nomeMed = nomeMedicoTransform(nomeMedUnformat);// Formatar o nome do médico
          
            // Chamar o método que cria a consulta e adicionar a consulta ao objeto clínica

            int idConsultaGerada = SqlSecretaria.criarConsulta(data, hora, motivo, nome, numeroSns,contactoInt, idSala, idMedicoInt, nomeMed);// Criar a consulta na base de dados
            Consulta consulta = new Consulta(idConsultaGerada, data, hora, motivo, nome, nomeMed, numeroSns,contactoInt, idSala, idMedicoInt);// Criar a consulta


            // Verificar se a consulta foi criada com sucesso
            if (idConsultaGerada != -1) {// Se a consulta foi criada com sucesso
                JOptionPane.showMessageDialog(this, "Consulta marcada com sucesso! ID da Consulta: " + idConsultaGerada, "Sucesso", JOptionPane.INFORMATION_MESSAGE);// Mostrar uma mensagem de sucesso
                // Limpar os campos
                nomePaciente.setText("");// Limpar o campo de nome do paciente
                nSns.setText("");// Limpar o campo de sns do paciente
                motivoConsulta.setText("");// Limpar o campo de motivo da consulta
                dataConsulta.setText("");// Limpar o campo de data da consulta
                horaConsulta.setText("");// Limpar o campo de hora da consulta
                idMedico.setText("");// Limpar o campo de id do médico
                salaConsulta.setText("");// Limpar o campo de id da sala
                contactoPaciente.setText("");// Limpar o campo de contacto do paciente

                // Adicionar a consulta ao objeto clínica
                getClinica().addConsulta(consulta);// Adicionar a consulta à lista de consultas
                carregarConsultasBaseDeDados();// Carregar as consultas da base de dados
            } else {// Se a consulta não foi criada com sucesso
                JOptionPane.showMessageDialog(this, "Erro ao marcar a consulta. Tente novamente.", "Erro", JOptionPane.ERROR_MESSAGE);// Mostrar uma mensagem de erro
            }
        } catch (NumberFormatException e) {// Se houver um erro de formatação
            JOptionPane.showMessageDialog(this, "Certifique-se de que os campos numéricos (SNS, Contacto, Médico, Sala) contêm apenas números.", "Erro de Formatação", JOptionPane.ERROR_MESSAGE);// Mostrar uma mensagem de erro
        } catch (HeadlessException | ParseException e) {// Se houver um erro inesperado
            JOptionPane.showMessageDialog(this, "Erro inesperado: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);// Mostrar uma mensagem de erro
        }
    }

    /**
     * @param args the command line arguments
     */
    // Método main
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {// Tenta definir o look and feel para Nimbus
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {// Para cada look and feel instalado
                if ("Nimbus".equals(info.getName())) {// Se for o Nimbus
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());// Definir o look and feel
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {// Se houver um erro de classe
            java.util.logging.Logger.getLogger(VistaSecretaria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);// Registar o erro
        } catch (InstantiationException ex) {// Se houver um erro de instanciação
            java.util.logging.Logger.getLogger(VistaSecretaria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);// Registar o erro
        } catch (IllegalAccessException ex) {// Se houver um erro de acesso
            java.util.logging.Logger.getLogger(VistaSecretaria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);// Registar o erro
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {// Se houver um erro de look and feel
            java.util.logging.Logger.getLogger(VistaSecretaria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);// Registar o erro
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */

        java.awt.EventQueue.invokeLater(() -> {// Criar e mostrar a janela
            new VistaSecretaria(passwordSecretaria).setVisible(true);// Tornar a janela visível

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField barraPesquisa;
    private javax.swing.JButton botaoHorarios;
    private javax.swing.JButton botaoMarcar;
    private javax.swing.JButton botaoMarcarConsultas;
    private javax.swing.JButton botaoPacientes;
    private javax.swing.JLabel botaoPesquisa;
    private javax.swing.JButton botaoVerConsultas;
    private javax.swing.JPanel consultasPanel;
    private javax.swing.JTextField contactoPaciente;
    private javax.swing.JFormattedTextField dataConsulta;
    private javax.swing.JLabel exitButton;
    private javax.swing.JFormattedTextField horaConsulta;
    private javax.swing.JTextField idMedico;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label;
    private javax.swing.JLayeredPane marcarConsultas;
    private javax.swing.JTextArea motivoConsulta;
    private javax.swing.JTextField nSns;
    private javax.swing.JTextField nomePaciente;
    private javax.swing.JLabel refreshButton;
    private javax.swing.JTextField salaConsulta;
    private javax.swing.JLayeredPane verConsultas;
    // End of variables declaration//GEN-END:variables
}
